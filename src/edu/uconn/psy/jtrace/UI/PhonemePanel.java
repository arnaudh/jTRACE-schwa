/*
 * PhonemeForm.java
 *
 * Created on April 23, 2007, 10:07 AM
 */

package edu.uconn.psy.jtrace.UI;
import edu.uconn.psy.jtrace.IO.*;
import edu.uconn.psy.jtrace.Model.*;
import javax.swing.*;
import javax.swing.event.*;
import javax.swing.table.*;
import java.util.*;
import java.awt.event.KeyEvent;
import org.jdesktop.layout.GroupLayout;

/**
 *
 * @author  tedstrauss
 */
public class PhonemePanel extends javax.swing.JPanel implements TableModelListener, ListSelectionListener{
    
    private TraceParam parameters;
    TracePhones currPhonology;
    DefaultListModel langListModel;
    DefaultListModel phonListModel;
    int dur_table_row, dur_table_col;
    
    /** Creates new form PhonemeForm */
    public PhonemePanel(TraceParam _p) {        
        parameters=_p;
        currPhonology = parameters.getPhonology();
        initComponents();
        initContents();        
        registerListeners();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        featuresScroller = new javax.swing.JScrollPane();
        featuresTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        phonList = new javax.swing.JList();
        jToolBar1 = new javax.swing.JToolBar();
        newPhonButton = new javax.swing.JButton();
        delPhonButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        langList = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        helpButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        loadPhonologyButton = new javax.swing.JButton();
        savePhonologyButton = new javax.swing.JButton();
        renamePhonButton = new javax.swing.JButton();
        duplPhonButton = new javax.swing.JButton();
        jToolBar2 = new javax.swing.JToolBar();
        newLangButton = new javax.swing.JButton();
        delLangButton = new javax.swing.JButton();
        renameLangButton = new javax.swing.JButton();
        duplLangButton = new javax.swing.JButton();
        durScaleScroller = new javax.swing.JScrollPane();
        durScaleTable = new javax.swing.JTable();
        durationTableTitle = new javax.swing.JLabel();
        langStatusLabel = new javax.swing.JLabel();
        phonStatusLabel = new javax.swing.JLabel();
        infoLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        allophonyScroller = new javax.swing.JScrollPane();
        allophonyTable = new javax.swing.JTable();

        setMaximumSize(new java.awt.Dimension(300, 200));
        setMinimumSize(new java.awt.Dimension(300, 200));
        setName("Phoneme Specifications");
        setPreferredSize(new java.awt.Dimension(300, 200));
        featuresTable.setFont(new java.awt.Font("Lucida Grande", 0, 10));
        featuresTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"1", new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0)},
                {"2", new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0)},
                {"3", new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0)},
                {"4", new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0)},
                {"5", new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0)},
                {"6", new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0)},
                {"7", new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0)},
                {"8", new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0)},
                {"9", new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0)}
            },
            new String [] {
                "#", "BUR", "VOI", "GRD", "ACU", "DIF", "VOC", "POW"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        featuresTable.setCellSelectionEnabled(true);
        featuresTable.setGridColor(new java.awt.Color(204, 255, 204));
        featuresTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                featuresTableKeyPressed(evt);
            }
        });

        featuresScroller.setViewportView(featuresTable);

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        phonList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(phonList);

        jToolBar1.setBorder(null);
        newPhonButton.setBackground(new java.awt.Color(192, 192, 192));
        newPhonButton.setText("+");
        newPhonButton.setAlignmentX(0.5F);
        newPhonButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        newPhonButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        newPhonButton.setMargin(new java.awt.Insets(10, 10, 10, 10));
        newPhonButton.setMaximumSize(new java.awt.Dimension(20, 20));
        newPhonButton.setMinimumSize(new java.awt.Dimension(20, 20));
        newPhonButton.setPreferredSize(new java.awt.Dimension(20, 20));
        newPhonButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newPhonButtonActionPerformed(evt);
            }
        });

        jToolBar1.add(newPhonButton);

        delPhonButton.setBackground(new java.awt.Color(192, 192, 192));
        delPhonButton.setText("-");
        delPhonButton.setAlignmentX(0.5F);
        delPhonButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        delPhonButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        delPhonButton.setMaximumSize(new java.awt.Dimension(20, 20));
        delPhonButton.setMinimumSize(new java.awt.Dimension(20, 20));
        delPhonButton.setPreferredSize(new java.awt.Dimension(20, 20));
        delPhonButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delPhonButtonActionPerformed(evt);
            }
        });

        jToolBar1.add(delPhonButton);

        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane3.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        langList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(langList);

        jLabel1.setText("Phoneme Specification - ");

        helpButton.setText("?");
        helpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Languages");

        jLabel3.setText("Phonemes");

        loadPhonologyButton.setFont(new java.awt.Font("Lucida Grande", 0, 9));
        loadPhonologyButton.setText("Load...");
        loadPhonologyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadPhonologyButtonActionPerformed(evt);
            }
        });

        savePhonologyButton.setFont(new java.awt.Font("Lucida Grande", 0, 9));
        savePhonologyButton.setText("Save...");
        savePhonologyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savePhonologyButtonActionPerformed(evt);
            }
        });

        renamePhonButton.setFont(new java.awt.Font("Lucida Grande", 0, 9));
        renamePhonButton.setText("Rename");
        renamePhonButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renamePhonButtonActionPerformed(evt);
            }
        });

        duplPhonButton.setFont(new java.awt.Font("Lucida Grande", 0, 9));
        duplPhonButton.setText("Duplicate");
        duplPhonButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                duplPhonButtonActionPerformed(evt);
            }
        });

        jToolBar2.setBorder(null);
        newLangButton.setBackground(new java.awt.Color(192, 192, 192));
        newLangButton.setText("+");
        newLangButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        newLangButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        newLangButton.setMargin(new java.awt.Insets(10, 10, 10, 10));
        newLangButton.setMaximumSize(new java.awt.Dimension(20, 20));
        newLangButton.setMinimumSize(new java.awt.Dimension(20, 20));
        newLangButton.setPreferredSize(new java.awt.Dimension(20, 20));
        newLangButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newLangButtonActionPerformed(evt);
            }
        });

        jToolBar2.add(newLangButton);

        delLangButton.setBackground(new java.awt.Color(192, 192, 192));
        delLangButton.setText("-");
        delLangButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        delLangButton.setMaximumSize(new java.awt.Dimension(20, 20));
        delLangButton.setMinimumSize(new java.awt.Dimension(20, 20));
        delLangButton.setPreferredSize(new java.awt.Dimension(20, 20));
        delLangButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delLangButtonActionPerformed(evt);
            }
        });

        jToolBar2.add(delLangButton);

        renameLangButton.setFont(new java.awt.Font("Lucida Grande", 0, 9));
        renameLangButton.setText("Rename");
        renameLangButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renameLangButtonActionPerformed(evt);
            }
        });

        duplLangButton.setFont(new java.awt.Font("Lucida Grande", 0, 9));
        duplLangButton.setText("Duplicate");
        duplLangButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                duplLangButtonActionPerformed(evt);
            }
        });

        durScaleTable.setFont(new java.awt.Font("Lucida Grande", 0, 10));
        durScaleTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Len", new Double(1.0), new Double(1.0), new Double(1.0), new Double(1.0), new Double(1.0), new Double(1.0), new Double(1.0)}
            },
            new String [] {
                "#", "BUR", "VOI", "GRD", "ACU", "DIF", "VOC", "POW"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        durScaleTable.setColumnSelectionAllowed(true);
        durScaleTable.setGridColor(new java.awt.Color(204, 255, 204));
        durScaleTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                durScaleTableKeyPressed(evt);
            }
        });

        durScaleScroller.setViewportView(durScaleTable);

        durationTableTitle.setText("Duration scalar  ");

        langStatusLabel.setFont(new java.awt.Font("Lucida Grande", 0, 10));
        langStatusLabel.setText("[Language]");

        phonStatusLabel.setFont(new java.awt.Font("Lucida Grande", 0, 10));
        phonStatusLabel.setText("/Phoneme/");

        infoLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 9));
        infoLabel1.setText("The language that is highlighted when you leave this panel will be used in the simulation.");

        jLabel4.setFont(new java.awt.Font("Lucida Grande", 0, 10));
        jLabel4.setText("(Range=[0.0-2.0]; experimental parameter, values are locked together)");

        jLabel5.setText("Allophonic relations");

        jLabel6.setFont(new java.awt.Font("Lucida Grande", 0, 10));
        jLabel6.setText(" (Allophones do not inhibit one another during phon-phon processing.)");

        allophonyTable.setFont(new java.awt.Font("Lucida Grande", 0, 10));
        allophonyTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Allophone?"}
            },
            new String [] {
                " "
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        allophonyTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        allophonyTable.setColumnSelectionAllowed(true);
        allophonyTable.setGridColor(new java.awt.Color(204, 255, 204));
        allophonyTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                allophonyTableKeyPressed(evt);
            }
        });
        allophonyTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                allophonyTableMouseClicked(evt);
            }
        });

        allophonyScroller.setViewportView(allophonyTable);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(allophonyScroller, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 479, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, durScaleScroller, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 479, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(jLabel1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(langStatusLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(phonStatusLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 164, Short.MAX_VALUE)
                        .add(helpButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 33, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, featuresScroller, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 479, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .add(durationTableTitle)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel4))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .add(jLabel5)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel6))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(layout.createSequentialGroup()
                                .add(jToolBar2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(20, 20, 20))
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                    .add(loadPhonologyButton, 0, 0, Short.MAX_VALUE)
                                    .add(savePhonologyButton, 0, 0, Short.MAX_VALUE)
                                    .add(org.jdesktop.layout.GroupLayout.LEADING, duplLangButton, 0, 0, Short.MAX_VALUE)
                                    .add(renameLangButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 72, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)))
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel2)
                            .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 102, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 155, Short.MAX_VALUE)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, duplPhonButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, renamePhonButton))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
                            .add(layout.createSequentialGroup()
                                .add(jToolBar1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(24, 24, 24)))
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jLabel3)
                            .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, infoLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 479, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(helpButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 26, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(langStatusLabel)
                    .add(phonStatusLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(featuresScroller, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 166, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(durationTableTitle)
                    .add(jLabel4))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(durScaleScroller, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 45, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel5)
                    .add(jLabel6))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(allophonyScroller, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 36, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(17, 17, 17)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(jLabel3))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane3, 0, 0, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(jToolBar2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(renameLangButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 17, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(duplLangButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 17, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(savePhonologyButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 15, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(loadPhonologyButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(jToolBar1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(2, 2, 2)
                        .add(renamePhonButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(duplPhonButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(41, 41, 41))
                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(infoLabel1)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void allophonyTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_allophonyTableMouseClicked
        for(int i=1;i<allophonyTable.getColumnCount();i++){
            int p1 = currPhonology.mapPhon(allophonyTable.getModel().getColumnName(i).charAt(0));
            int p2 = currPhonology.mapPhon(((String)phonList.getSelectedValue()).charAt(0));
            boolean val = ((Boolean)allophonyTable.getModel().getValueAt(0,i)).booleanValue();
            currPhonology.setAllophoneRelation(p1,p2,val);
            currPhonology.setAllophoneRelation(p2,p1,val);            
        }
    }//GEN-LAST:event_allophonyTableMouseClicked

    private void allophonyTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_allophonyTableKeyPressed
// TODO add your handling code here:
    }//GEN-LAST:event_allophonyTableKeyPressed

    private void durScaleTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_durScaleTableKeyPressed
        //System.out.println("key: "+evt.getKeyChar()+"\tcode: "+evt.getKeyCode());
        if(durScaleTable.isEditing()&&(evt.getKeyCode()!=KeyEvent.VK_ENTER&&evt.getKeyCode()!=KeyEvent.VK_LEFT&&evt.getKeyCode()!=KeyEvent.VK_RIGHT&&evt.getKeyCode()!=KeyEvent.VK_UP&&evt.getKeyCode()!=KeyEvent.VK_DOWN)){ 
            dur_table_row = durScaleTable.getSelectedRow();
            dur_table_col = durScaleTable.getSelectedColumn();                
            return;
        }        
        //
        String phon = (String)phonList.getSelectedValue();                
        Object cel;
        cel = durScaleTable.getValueAt(dur_table_row, dur_table_col);
        if(cel==null) return;
        double val;        
        //System.out.println("d\teditting cell: "+cel+"\t"+cel.getClass());
        if(cel instanceof Double){
            val=((Double)cel).doubleValue(); 
            if(val>2) val=2;
            if(val<0) val=0;
            for(int j=1;j<((Vector)((DefaultTableModel)durScaleTable.getModel()).getDataVector().elementAt(0)).size();j++)
                ((DefaultTableModel)durScaleTable.getModel()).setValueAt(new Double(val),0,j);
                //durScaleTable.setValueAt(new Double(val),0,j);                        
        }
        else{ //if(cel instanceof String)            
            return;
            //val=(new Double((String)cel)).doubleValue();
        }

        
        double[] dur = new double[currPhonology.NCONTS];
        //javadoc note: ((Vector)featuresTable.getDataVector().elementAt(1)).elementAt(5); //row 1, col 5
        for(int j=1;j<((Vector)((DefaultTableModel)durScaleTable.getModel()).getDataVector().elementAt(0)).size();j++){
            try{
                //System.out.println(i+" "+j+" type- "+((Vector)((DefaultTableModel)featuresTable.getModel()).getDataVector().elementAt(j)).elementAt(i).getClass());
                cel = ((Vector)((DefaultTableModel)durScaleTable.getModel()).getDataVector().elementAt(0)).elementAt(j);                
                if(cel instanceof Double)
                    val=((Double)cel).doubleValue(); 
                else //if(cel instanceof String)
                    val=(new Double((String)cel)).doubleValue();
                dur[j-1] = val;
            }
            catch(java.lang.ClassCastException cce){
                cce.printStackTrace();
                System.out.println("originating cell: "+j+" ...returning to caller.");
                return;
            }
        }
        //
        TracePhones.Phon toChange = currPhonology.getPhon(phon);
        toChange.durationScalar=dur;
        currPhonology.replacePhoneme(toChange.label,toChange);
        parameters.setPhonology(currPhonology); //redundant?
        durScaleTable.repaint();
        durScaleTable.update(durScaleTable.getGraphics());
    }//GEN-LAST:event_durScaleTableKeyPressed

    private void featuresTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_featuresTableKeyPressed
        String phon = (String)phonList.getSelectedValue();
        double[] ft = new double[currPhonology.NFEATS*currPhonology.NCONTS];
        //javadoc note: ((Vector)featuresTable.getDataVector().elementAt(1)).elementAt(5); //row 1, col 5
        for(int i=1;i<((Vector)((DefaultTableModel)featuresTable.getModel()).getDataVector().elementAt(1)).size();i++)
            for(int j=0;j<((Vector)((DefaultTableModel)featuresTable.getModel()).getDataVector()).size();j++){
                try{
                    //System.out.println(i+" "+j+" type- "+((Vector)((DefaultTableModel)featuresTable.getModel()).getDataVector().elementAt(j)).elementAt(i).getClass());
                    Object cel = ((Vector)((DefaultTableModel)featuresTable.getModel()).getDataVector().elementAt(j)).elementAt(i);
                    double val;
                    if(cel instanceof Double)
                        val=((Double)cel).doubleValue(); 
                    else //if(cel instanceof String)
                        val=(new Double((String)cel)).doubleValue();
                    ft[((i-1)*currPhonology.NFEATS)+j] = val;
                }
                catch(java.lang.ClassCastException cce){
                    cce.printStackTrace();
                    System.out.println("originating cell: "+i+","+j+" ...returning to caller.");
                    return;
                }
            }
        //
        TracePhones.Phon toChange = currPhonology.getPhon(phon);
        toChange.features=ft;
        currPhonology.replacePhoneme(toChange.label,toChange);
        parameters.setPhonology(currPhonology); //redundant?
    }//GEN-LAST:event_featuresTableKeyPressed

    private void helpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpButtonActionPerformed
        HelpFrame helpFrame = new HelpFrame(jTRACEMDI.properties);            
        helpFrame.setVisible(true);
        helpFrame.setEnabled(true);
        helpFrame.scrollToLink("#phonemes panel");
    }//GEN-LAST:event_helpButtonActionPerformed

    private void delPhonButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delPhonButtonActionPerformed
        //verify delete action.
        int verify = JOptionPane.showConfirmDialog(this,new String("Confirm delete phoneme: /"+phonList.getSelectedValue()+"/"));
        //System.out.println("verify "+verify);
        if(verify!=0)
            return;
        else{
            //delete the phone from the TracePhon repn
            String oldPhone = (String)phonList.getSelectedValue();
            currPhonology.removePhoneme((String)phonList.getSelectedValue());
            //delete from the list
            ((DefaultListModel)phonList.getModel()).removeElement(phonList.getSelectedValue());
            //
            String msg = "Do you want jTRACE to update the lexicon and input string to reflect this change?\nThe deleted phoneme will simply be removed, i.e. not replaced by anything.\nThis is recommended.";
            int answer = JOptionPane.showConfirmDialog(null,msg, "Question", JOptionPane.YES_NO_OPTION);
            if(answer==JOptionPane.YES_OPTION){
                parameters.updatePhonDeleted(oldPhone);
            }
            phonList.setSelectedIndex(0);
            phonList.requestFocus();            
        }
        
    }//GEN-LAST:event_delPhonButtonActionPerformed

    private void newPhonButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newPhonButtonActionPerformed
        String newPhone = JOptionPane.showInputDialog("Enter new phoneme symbol (single non-numeric character):");
        // warning
        // todo: validate for non-numeral contents
        // todo: validate for non-duplicate contents
        if(newPhone==null||newPhone.length()!=1){
            JOptionPane.showMessageDialog(this,
                "Action cancelled due to violation of phoneme rules:\nA phoneme symbol must be exactly one character long, and must not be a number.\nNew phoneme symbol cannot duplicate an existing one.\nPlease try again.",
                "Warning",
                JOptionPane.WARNING_MESSAGE);
        }
        //add new phoneme to list, and update other vars as needed.            
        else{            
            // add new default phone to phonology repn.
            currPhonology.addPhoneme(newPhone,currPhonology.DefaultIndividualPhonDefs,currPhonology.DefaultInidividualDurationScalar);
            // add the symbol to the list
            ((DefaultListModel)phonList.getModel()).insertElementAt(newPhone,phonList.getSelectedIndex());
            int newSelection = phonList.getSelectedIndex();
            // update the GUI 
            loadPhonemeListToGUI();
            phonList.setSelectedValue(newPhone,true);
            phonList.requestFocus();            
        }
    }//GEN-LAST:event_newPhonButtonActionPerformed

    private void renamePhonButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_renamePhonButtonActionPerformed
        String renamedPhone = JOptionPane.showInputDialog("Enter new phoneme symbol (single non-numeric character):");
        // warning
        // todo: validate for non-numeral contents
        // todo: validate for non-duplicate contents
        if(renamedPhone==null||renamedPhone.length()!=1){
            JOptionPane.showMessageDialog(this,
                "Action cancelled due to violation of phoneme rules:\nA phoneme symbol must be exactly one character long, and must not be a number.\nRenamed phoneme symbol cannot duplicate an existing one.\nPlease try again.",
                "Warning",
                JOptionPane.WARNING_MESSAGE);
        }
        //re-define the item in the phone list to the entered value.            
        else{
            // replace phon object
            TracePhones.Phon toRename = currPhonology.getPhon((String)phonList.getSelectedValue());
            String oldPhone = toRename.label;
            toRename.label = renamedPhone;
            currPhonology.replacePhoneme((String)phonList.getSelectedValue(),toRename);
            // reload GUI
            loadPhonemeListToGUI();
            //
            String msg = "Renaming phoneme /"+oldPhone+"/ to /"+renamedPhone+"/.\nDo you want jTRACE to update the lexicon and input string to reflect this change?\nThis is recommended.";
            int answer = JOptionPane.showConfirmDialog(null,msg, "Question", JOptionPane.YES_NO_OPTION);
            if(answer==JOptionPane.YES_OPTION){
                parameters.updatePhonChanged(oldPhone,renamedPhone);
            }
            phonList.setSelectedValue(renamedPhone,true);           
            phonList.requestFocus();
        }
    }//GEN-LAST:event_renamePhonButtonActionPerformed

    private void duplPhonButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_duplPhonButtonActionPerformed
        String duplPhone = JOptionPane.showInputDialog("The selected phoneme (/"+phonList.getSelectedValue()+"/) will be copied, and a new symbol will be used.\nEnter the new phoneme symbol (single non-numeric character):");
        // warning
        // todo: validate for non-numeral contents
        // todo: validate for non-duplicate contents
        if(duplPhone==null||duplPhone.length()!=1){
            JOptionPane.showMessageDialog(this,
                "Action cancelled due to violation of phoneme rules:\nA phoneme symbol must be exactly one character long, and must not be a number.\nRenamed phoneme symbol cannot duplicate an existing one.\nPlease try again.",
                "Warning",
                JOptionPane.WARNING_MESSAGE);
        }
        //re-define the item in the phone list to the entered value.            
        else{
            Object[] options = { "No thanks", "Create allophonic link" };
            String msg = "You have chosen to duplicate /"+((String)phonList.getSelectedValue())+"/ and create a new phoneme /"+duplPhone+"/.\n"+
                    "If an allophonic link is created, then the two phoneme will not compete with eachother during inter-layer inhibition.\n"+
                    "If there is no link, the two phonemes will compete normally.\n"+
                    "This is an experimental feature.";
            int answer = JOptionPane.showOptionDialog(null, msg, "Option",JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE,null, options, options[0]);
            
            // add the renamed phone to phonology repn.
            currPhonology.addPhoneme(duplPhone,currPhonology.getPhon((String)phonList.getSelectedValue()).features,currPhonology.getPhon((String)phonList.getSelectedValue()).durationScalar);
            
            // set allophonic relation between the selected phone, and the duplicated phone.
            if(answer==1){
                int p1 = currPhonology.mapPhon(((String)phonList.getSelectedValue()).charAt(0));
                int p2 = currPhonology.mapPhon(duplPhone.charAt(0));
                currPhonology.setAllophoneRelation(p1,p2,true);
                currPhonology.setAllophoneRelation(p2,p1,true);
            }
            // change the 'role' variable for the two allophones (this variable is just for show at the mo')
            currPhonology.getPhon(duplPhone).setRole(TracePhones.Phon.PHON_ROLE_ALLOPHONE);
            currPhonology.getPhon((String)phonList.getSelectedValue()).setRole(TracePhones.Phon.PHON_ROLE_ALLOPHONE);            
            
            // reload GUI
            loadPhonemeListToGUI();
            phonList.setSelectedValue(duplPhone,true);           
            phonList.requestFocus();
        }
    }//GEN-LAST:event_duplPhonButtonActionPerformed

    private void delLangButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delLangButtonActionPerformed
        //verify delete action.
        int verify = JOptionPane.showConfirmDialog(this,new String("Confirm delete language: ["+langList.getSelectedValue()+"]"));
        if(verify!=0)
            return;
        else{
            //delete the lang from the globalPhonology 
            TracePhones selectedLang;
            for(int i=0;i<jTRACEMDI.globalPhonology.size();i++)
                if(langList.getSelectedValue().equals(((TracePhones)jTRACEMDI.globalPhonology.get(i)).getLanguageName())){
                    //selectedLang = (TracePhones)jTRACEMDI.globalPhonology.get(i);
                    jTRACEMDI.globalPhonology.remove(i);
                }            
        }
        // reload GUI
        loadLanguageListToGUI();
        langList.setSelectedIndex(0);
        langList.requestFocus();
    }//GEN-LAST:event_delLangButtonActionPerformed

    private void newLangButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newLangButtonActionPerformed
        String newLangName = JOptionPane.showInputDialog("Provide name for new phoneme set.\nExamples: Canadian-english, Esperanto.");
        if(newLangName==null) return;
        //make the new language
        TracePhones newLang = new TracePhones();
        newLang.setLanguageName(newLangName);
        newLang.removeAllPhonemes();
        jTRACEMDI.globalPhonology.add(newLang);
        //add it to the GUi lists
        loadLanguageListToGUI();
        langList.requestFocus();
        langList.setSelectedValue(newLangName,true);                
        loadPhonologyToGUI();
        
    }//GEN-LAST:event_newLangButtonActionPerformed

    private void duplLangButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_duplLangButtonActionPerformed
        String duplLang = JOptionPane.showInputDialog("The selected language (["+langList.getSelectedValue()+"]) will be copied.\nEnter the name of the new language:");
        // warning
        if(duplLang==null){
            JOptionPane.showMessageDialog(this,
                "Action cancelled due to violation of language naming rules:\nThe language name should be ...\nPlease try again.",
                "Warning",
                JOptionPane.WARNING_MESSAGE);
        }
        //re-define the item in the phone list to the entered value.            
        else{
            // add the renamed phone to phonology repn.            
            TracePhones selectedLang;
            for(int i=0;i<jTRACEMDI.globalPhonology.size();i++)
                if(langList.getSelectedValue().equals(((TracePhones)jTRACEMDI.globalPhonology.get(i)).getLanguageName())){
                    selectedLang = (TracePhones)jTRACEMDI.globalPhonology.get(i);
                    TracePhones newLang = selectedLang.clone();
                    newLang.setLanguageName(duplLang);
                    jTRACEMDI.globalPhonology.add(newLang);
                }
            
            // reload GUI
            loadLanguageListToGUI();
            langList.setSelectedValue(duplLang,true);           
            langList.requestFocus();
        }
    }//GEN-LAST:event_duplLangButtonActionPerformed

    private void renameLangButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_renameLangButtonActionPerformed
        String renamedLang = JOptionPane.showInputDialog("Enter new language name:");
        // if that language name already exists, error out
        //otherwise, set it up.
        if(true){
        }
        
    }//GEN-LAST:event_renameLangButtonActionPerformed

    private void savePhonologyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savePhonologyButtonActionPerformed
        // OK, get a filename from the user
        // pop up a file-save box 
        JFileChooser fileChooser = new JFileChooser(traceProperties.rootPath.getAbsolutePath());
        
        fileChooser.setDialogType(JFileChooser.SAVE_DIALOG);
        fileChooser.setDialogTitle("Save phonology to file");
        fileChooser.setFileFilter(new edu.uconn.psy.jtrace.IO.XMLFileFilter());
        fileChooser.setCurrentDirectory(traceProperties.workingPath);                    
        
        int returnVal = fileChooser.showSaveDialog(this);
        
        if (returnVal == JFileChooser.APPROVE_OPTION) 
        {
            java.io.File saveFile = fileChooser.getSelectedFile();
            traceProperties.workingPath = saveFile.getParentFile();    
                
            edu.uconn.psy.jtrace.IO.WTFileWriter fw = new edu.uconn.psy.jtrace.IO.WTFileWriter(saveFile,false);
            
            fw.writeAndClose(currPhonology.XMLTagNamespace());
        }
        // else, cancelled
    }//GEN-LAST:event_savePhonologyButtonActionPerformed
    
    /**
     *Register listeners that pay attention to GUI elements,
     *and update the TraceParam object upon any change in the contents.
     */
    private void registerListeners(){
        featuresTable.getModel().addTableModelListener(this);
        durScaleTable.getModel().addTableModelListener(this);
        allophonyTable.getModel().addTableModelListener(this);
        langList.addListSelectionListener(this);
        phonList.addListSelectionListener(this);
    }
    
    /**
     *Responds to value changes in the feature or duration tables.
     */
    public void tableChanged(TableModelEvent e){        
        // for some reason updating the table w/i the GUI does not
        // fire a TableModelEvent, and so this listener is useless.
        // I'm using a key listener instead.
        //System.out.println("table change detected: "+e.getColumn()+" "+e.getType());
    }
    /**
     *Responds to selection changes in the langauge list or the phoneme list.
     */
    public void valueChanged(ListSelectionEvent e){
        //if it's the langauge list, then reload the phoneme
        //list, and the tables.
        if(e.getSource()==langList){
            updateCurrentPhonologyAfterLangSelection();
            //langList.setSelectedIndex(0);
            loadPhonemeListToGUI();
            loadPhonemesSpecsToGUI();
            parameters.setPhonology(currPhonology);
        }
        //if it's the phoneme table, then just change the table
        else if(e.getSource()==phonList){
            loadPhonemesSpecsToGUI();
        }
    }
    
    /**
     *Fetch the list of loaded phonologies and populate
     *the lists and tables of the GUI with them.
     *
     */
    private void initContents(){        
        loadPhonologyToGUI();
    }
    
    private void loadPhonologyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadPhonologyButtonActionPerformed
        java.io.File phonFile;
        javax.swing.JFileChooser phonFileChooser = new javax.swing.JFileChooser(traceProperties.rootPath.getAbsolutePath());
            
        phonFileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        phonFileChooser.addChoosableFileFilter(new XMLFileFilter());
        phonFileChooser.setCurrentDirectory(traceProperties.workingPath);            
        
        // show dialog
        int returnVal = phonFileChooser.showOpenDialog(this);
        
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            // we got a file...
            phonFile = phonFileChooser.getSelectedFile();
            traceProperties.workingPath = phonFile.getParentFile();    
            
            // try to read it
            WTFileReader fileReader = new WTFileReader(phonFile);
            
            if (!fileReader.validatePhonologyFile()){             
                javax.swing.JOptionPane.showMessageDialog(null, "Invalid phonology file.", "Error", javax.swing.JOptionPane.WARNING_MESSAGE);
                return;
            }
            TracePhones newPhono = fileReader.loadJTPhonology();
            // load it to the panel GUI
            ((DefaultListModel)langList.getModel()).addElement(newPhono.getLanguageName());
            jTRACEMDI.globalPhonology.add(newPhono);
            int newIdx = langList.getMaxSelectionIndex();                    
            langList.setSelectedIndex(newIdx+1);
            updateCurrentPhonologyAfterLangSelection();
            loadPhonemeListToGUI();
            loadPhonemesSpecsToGUI();            
        }
        else{ //if(returnVal == javax.swing.JFileChooser.CANCEL_OPTION){
            return;
        }
    }//GEN-LAST:event_loadPhonologyButtonActionPerformed
    
    private void updateCurrentPhonologyAfterLangSelection(){
        String name = (String)langList.getSelectedValue(); //String)langList.getModel().getElementAt(langList.getSelectedIndex());
        //System.out.println("1. Current lang selection["+langList.getSelectedIndex()+"] "+name);
        if(name=="null"||name==null){ 
            System.out.println("Warning: PhonemePanel.updateCurrentPhonologyAfterLangSelection(); no list item selected.");
            langList.setSelectedIndex(0);            
            name = (String)langList.getSelectedValue(); //String)langList.getModel().getElementAt(langList.getSelectedIndex());
            //System.out.println("2. Current lang selection["+langList.getSelectedIndex()+"] "+name);        
        }
        for(int i=0;i<jTRACEMDI.globalPhonology.size();i++){
            //System.out.println(i+"\t"+name+"\t"+((TracePhones)jTRACEMDI.globalPhonology.get(i)).getLanguageName());
            if(((TracePhones)jTRACEMDI.globalPhonology.get(i)).getLanguageName().equals(name)){
                currPhonology=(TracePhones)jTRACEMDI.globalPhonology.get(i);
                return;
            }
        }
        System.out.println("Warning: PhonemePanel.updateCurrentPhonologyAfterLangSelection() did not find currPhonology '"+name+"' object in list of languages.");
    }
    
    /**
     *Load language list, phonology list, and duration scalar list 
     *to the phoneme panel GUI.
     */
    private void loadPhonologyToGUI(){
        //the current phonology is loaded first...
        langListModel = new DefaultListModel();
        langListModel.addElement(currPhonology.getLanguageName());
        //followed by all phonology files in the jTRACE/phonology directory.
        // making sure to not load a duplicate of the current one
        for(int i=0;i<jTRACEMDI.globalPhonology.size();i++)
            if(!((TracePhones)jTRACEMDI.globalPhonology.get(i)).getLanguageName().equals(currPhonology.getLanguageName())){
                langListModel.addElement(((TracePhones)jTRACEMDI.globalPhonology.get(i)).getLanguageName());
                //System.out.println("Loading phoneme set "+((TracePhones)jTRACEMDI.globalPhonology.get(i)).getLanguageName()+" from file.");
            }
        langList.setModel(langListModel);
        langList.setSelectedIndex(0);
        //change label at top of panel.
        langStatusLabel.setText("["+currPhonology.getLanguageName()+"]");
        loadPhonemeListToGUI();
        loadPhonemesSpecsToGUI();
        
    }
    public void loadLanguageListToGUI(){
        Object[] toLoad = jTRACEMDI.globalPhonology.toArray();
        langListModel = new DefaultListModel();
        if(toLoad==null){
            langListModel.addElement(" ");
        }
        else{
            for(int i=0;i<toLoad.length;i++){
                //System.out.println("Loading to langList "+((TracePhones)toLoad[i]).getLanguageName());        
                langListModel.addElement(((TracePhones)toLoad[i]).getLanguageName());                    
            }
        }
        langList.setModel(langListModel);
        langList.requestFocus();
        langList.setSelectedIndex(0);        
    }
    public void loadPhonemeListToGUI(){
        int idx=langList.getSelectedIndex();
        // get the selected language
        String[] toLoad = currPhonology.getLabels();
        Iterator iter = parameters.getPhonology().getPhonemes().values().iterator();
        if(currPhonology.getLanguageName()==null)
            return;
        else if(((String)langList.getSelectedValue()).equals(currPhonology.getLanguageName())){
            //System.out.println("PhonemePanel: curr phon selected.");
            //toLoad=parameters.getPhonology().getLabels();
            iter = parameters.getPhonology().getPhonemes().values().iterator();
        }
        else{
            //System.out.println("PhonemePanel: NOT curr phon selected.");
            for(int i=0;i<jTRACEMDI.globalPhonology.size();i++)
                if(((TracePhones)jTRACEMDI.globalPhonology.get(i)).getLanguageName().equals(((String)langList.getModel().getElementAt(idx)))){
                    //toLoad=((TracePhones)jTRACEMDI.globalPhonology.get(i)).getLabels();
                    iter = ((TracePhones)jTRACEMDI.globalPhonology.get(i)).getPhonemes().values().iterator();
                }
        }
        phonListModel = new DefaultListModel();
        if(toLoad==null){
            phonListModel.addElement(" ");
        }
        else{
            for(int i=0;iter.hasNext();i++)
               phonListModel.addElement(((TracePhones.Phon)iter.next()).label);        
            //for(int i=0;i<toLoad.length;i++)
            //    phonListModel.addElement(toLoad[i]);
        }
        phonList.setModel(phonListModel);
        phonList.setSelectedIndex(0);        
    }
    /**
     * load the currently selected phoneme definition to the GUI.
     */
    public void loadPhonemesSpecsToGUI(){
        refreshFeaturesTable();
        //setValueAt(value,row,col)
        String phon = (String)phonList.getSelectedValue();
        if(phon==null) return;
        //load phon feature to feature table.
        //System.out.println("\nphoneme /"+phon+"/");
        double[] phonFeatures = currPhonology.getPhon(phon).features;
        for(int i=0;i<phonFeatures.length;i++){
            featuresTable.getModel().setValueAt(new Double(phonFeatures[i]),(i%currPhonology.NFEATS),(int)1+(i/currPhonology.NFEATS)); //row, col            
        }
        //load duration scalars to duration table.
        double[] phonDurations = currPhonology.getPhon(phon).durationScalar;
        for(int k=0;k<currPhonology.NCONTS;k++)
                durScaleTable.getModel().setValueAt(new Double(phonDurations[k]),0,(k+1)); //row, col       
        //load allophone table, and contents.
        loadAllophonySpecsToGUI();
        
        //change label at top of panel.
        phonStatusLabel.setText("/"+currPhonology.getPhon(phon).label+"/");        
    }
    public void loadAllophonySpecsToGUI(){
        allophonyTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {{"Allophony"}},
            new String [] {" "}) {
            Class[] types = new Class [] {java.lang.Object.class};
            boolean[] canEdit = new boolean [] {false};
            public Class getColumnClass(int columnIndex) {
                if(columnIndex==0) return Object.class;
                else return Boolean.class;
            }
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                if(columnIndex==0) return false;
                else return true;}}
        );
        Iterator iter = currPhonology.getPhonemes().values().iterator();        
        while(iter.hasNext()){
            TracePhones.Phon nex = (TracePhones.Phon)iter.next();
            if(nex.label==(String)phonList.getSelectedValue()) continue;
            Boolean nexVal = new Boolean(currPhonology.getAllophoneRelation(currPhonology.mapPhon(nex.label.charAt(0)),currPhonology.mapPhon(((String)phonList.getSelectedValue()).charAt(0))));
            ((DefaultTableModel)allophonyTable.getModel()).addColumn(nex.label,new Boolean[] {nexVal});            
        }
    }
    private void refreshFeaturesTable(){
        featuresTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"1", new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0)},
                {"2", new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0)},
                {"3", new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0)},
                {"4", new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0)},
                {"5", new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0)},
                {"6", new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0)},
                {"7", new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0)},
                {"8", new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0)},
                {"9", new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0)}
            },
            new String [] {
                "#", "BUR", "VOI", "GRD", "ACU", "DIF", "VOC", "POW"
            }
        ));
    }    
    public TracePhones getPhonologyFromGUI(){
        return new TracePhones();
    }
    public void notify(TraceParam _tp){
        parameters=_tp;
        currPhonology = parameters.getPhonology();
        loadPhonologyToGUI();
    }
    public static void printFeatures(double[] _f){
        for(int i=0;i<_f.length;i++){        
            if(i%9==0&&i>0) System.out.println();
            System.out.print(_f[i]+"\t");            
        }
        System.out.println();
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane allophonyScroller;
    private javax.swing.JTable allophonyTable;
    private javax.swing.JButton delLangButton;
    private javax.swing.JButton delPhonButton;
    private javax.swing.JButton duplLangButton;
    private javax.swing.JButton duplPhonButton;
    private javax.swing.JScrollPane durScaleScroller;
    private javax.swing.JTable durScaleTable;
    private javax.swing.JLabel durationTableTitle;
    private javax.swing.JScrollPane featuresScroller;
    private javax.swing.JTable featuresTable;
    private javax.swing.JButton helpButton;
    private javax.swing.JLabel infoLabel1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JList langList;
    private javax.swing.JLabel langStatusLabel;
    private javax.swing.JButton loadPhonologyButton;
    private javax.swing.JButton newLangButton;
    private javax.swing.JButton newPhonButton;
    private javax.swing.JList phonList;
    private javax.swing.JLabel phonStatusLabel;
    private javax.swing.JButton renameLangButton;
    private javax.swing.JButton renamePhonButton;
    private javax.swing.JButton savePhonologyButton;
    // End of variables declaration//GEN-END:variables
    
}
