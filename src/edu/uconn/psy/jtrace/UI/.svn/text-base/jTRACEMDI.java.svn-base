/*
 * jTRACEMDI.java
 *
 * Created on April 20, 2005, 10:55 AM
 */

package edu.uconn.psy.jtrace.UI;

import java.awt.*;
import java.io.File;
import javax.swing.*;
import javax.swing.event.*;
import java.lang.Math;
import java.util.LinkedList;
import edu.uconn.psy.jtrace.Model.*;
import edu.uconn.psy.jtrace.IO.*;

/**
 *
 * @author  harlan
 */
public class jTRACEMDI extends JFrame implements InternalFrameListener {
    // stuff for maintaining windows
    static private int createdWindows = 0;  // kept track of by load/close methods,
                                            // used for menuItem and jtChildren arrays
    static private int openWindows = 0;     // kept track of by internalFrame* methods
    // openWindows should include the scripting window; createdWindows should not
    private final int maxOpenWindows = 20;
    
    // for maintaining the Windows menu
    private WindowMenuList windowMenuList;
//    private JMenuItem [] menuItemWindowList;
//    private jTRACE [] jtChildren;           // like desktopPane.getAllFrames(), but no scriptingFrame
    
    public static traceProperties properties;     // global preferences, directory settings, etc.
    
    static MouseOverHintManager hintManager;    // GLOBAL VARIABLE
    
    /** Creates new form jTRACEMDI */
    public jTRACEMDI() {
        initComponents();
                
        // see formWindowClosing() and exitHandler()
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        
        final int inset = 50;
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        setBounds(inset, inset,
            screenSize.width  - inset*2,
            screenSize.height - inset*2);
        
        windowMenuList = new WindowMenuList();
            
        // set or create properties object
        properties=new edu.uconn.psy.jtrace.UI.traceProperties();    
        properties.situate(this);

        // set up hint manager
        hintManager = new MouseOverHintManager(hintBar);
        
        // and disable the tooltip manager
        ToolTipManager.sharedInstance().setEnabled(false);

        // and add the first jTRACE frame - no, don't! 
        //addJTRACEFrame();
        
        // create the gallery menu based on .jt files in (root)/Gallery
        initGalleryMenu();
        
        initHints();
        hintManager.enableHints(this);
        
        // add the scripting frame, minimized
        addScriptingFrame(properties);                
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        infoTextPane = new javax.swing.JTextPane();
        desktopPane = new javax.swing.JDesktopPane();
        hintBar = new javax.swing.JLabel();
        jMenuBar2 = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        menuItemNew = new javax.swing.JMenuItem();
        menuItemClone = new javax.swing.JMenuItem();
        menuItemLoad = new javax.swing.JMenuItem();
        menuItemSave = new javax.swing.JMenuItem();
        menuItemSaveAs = new javax.swing.JMenuItem();
        menuItemCloseAll = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JSeparator();
        menuItemExit = new javax.swing.JMenuItem();
        menuGallery = new javax.swing.JMenu();
        menuWindow = new javax.swing.JMenu();
        menuItemScripting = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JSeparator();
        menuItemCascade = new javax.swing.JMenuItem();
        menuItemTile = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        menuHelp = new javax.swing.JMenu();
        menuItemHelpContents = new javax.swing.JMenuItem();
        menuItemAbout = new javax.swing.JMenuItem();

        infoTextPane.setBackground(javax.swing.UIManager.getDefaults().getColor("Label.background"));
        infoTextPane.setBorder(new javax.swing.border.EtchedBorder());
        infoTextPane.setEditable(false);
        infoTextPane.setText("...");
        infoTextPane.setFocusable(false);

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("jTRACE");
        setName("jTRACEFrame");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        //Make the big window be indented 50 pixels from each edge
        //of the screen.
        int inset = 50;
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        setBounds(inset, inset,
            screenSize.width  - inset*2,
            screenSize.height - inset*2);
        desktopPane.setDragMode(javax.swing.JDesktopPane.OUTLINE_DRAG_MODE);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(desktopPane, gridBagConstraints);

        hintBar.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED));
        hintBar.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(hintBar, gridBagConstraints);

        menuFile.setMnemonic('F');
        menuFile.setText("File");
        menuItemNew.setMnemonic('N');
        menuItemNew.setText("New Model");
        menuItemNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemNewActionPerformed(evt);
            }
        });

        menuFile.add(menuItemNew);

        menuItemClone.setMnemonic('C');
        menuItemClone.setText("Clone");
        menuItemClone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemCloneActionPerformed(evt);
            }
        });

        menuFile.add(menuItemClone);

        menuItemLoad.setMnemonic('L');
        menuItemLoad.setText("Load...");
        menuItemLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemLoadActionPerformed(evt);
            }
        });

        menuFile.add(menuItemLoad);

        menuItemSave.setMnemonic('S');
        menuItemSave.setText("Save");
        menuItemSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemSaveActionPerformed(evt);
            }
        });

        menuFile.add(menuItemSave);

        menuItemSaveAs.setMnemonic('A');
        menuItemSaveAs.setText("Save As...");
        menuItemSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemSaveAsActionPerformed(evt);
            }
        });

        menuFile.add(menuItemSaveAs);

        menuItemCloseAll.setMnemonic('o');
        menuItemCloseAll.setText("Close All");
        menuItemCloseAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemCloseAllActionPerformed(evt);
            }
        });

        menuFile.add(menuItemCloseAll);

        menuFile.add(jSeparator3);

        menuItemExit.setMnemonic('x');
        menuItemExit.setText("Exit");
        menuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitHandler(evt);
            }
        });

        menuFile.add(menuItemExit);

        jMenuBar2.add(menuFile);

        menuGallery.setMnemonic('G');
        menuGallery.setText("Gallery");
        menuGallery.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jMenuBar2.add(menuGallery);

        menuWindow.setMnemonic('W');
        menuWindow.setText("Window");
        menuItemScripting.setMnemonic('S');
        menuItemScripting.setText("Scripting");
        menuItemScripting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemScriptingActionPerformed(evt);
            }
        });

        menuWindow.add(menuItemScripting);

        menuWindow.add(jSeparator4);

        menuItemCascade.setMnemonic('C');
        menuItemCascade.setText("Cascade");
        menuItemCascade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemCascadeActionPerformed(evt);
            }
        });

        menuWindow.add(menuItemCascade);

        menuItemTile.setMnemonic('T');
        menuItemTile.setText("Tile");
        menuItemTile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemTileActionPerformed(evt);
            }
        });

        menuWindow.add(menuItemTile);

        menuWindow.add(jSeparator2);

        jMenuBar2.add(menuWindow);

        menuHelp.setMnemonic('H');
        menuHelp.setText("Help");
        menuHelp.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        menuItemHelpContents.setMnemonic('H');
        menuItemHelpContents.setText("Help...");
        menuItemHelpContents.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemHelpContentsActionPerformed(evt);
            }
        });

        menuHelp.add(menuItemHelpContents);

        menuItemAbout.setMnemonic('A');
        menuItemAbout.setText("About...");
        menuItemAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemAboutActionPerformed(evt);
            }
        });

        menuHelp.add(menuItemAbout);

        jMenuBar2.add(menuHelp);

        setJMenuBar(jMenuBar2);

        pack();
    }//GEN-END:initComponents

    private void initGalleryMenu(){
        java.io.File galleryDir = new java.io.File(edu.uconn.psy.jtrace.UI.traceProperties.rootPath.getAbsolutePath() +
                System.getProperty("file.separator") + "gallery");
        
        if(galleryDir.exists()&&galleryDir.isDirectory())
        {
            java.io.File[] galleryItems = galleryDir.listFiles();
            int incr = 0;
            for(int i=0;i<galleryItems.length;i++){
                if(galleryItems[i].getName().endsWith(".jt")||galleryItems[i].getName().endsWith(".xml")){                    
                    menuGallery.add(new javax.swing.JMenuItem());
                    menuGallery.getItem(incr).setText(galleryItems[i].getName());
                    menuGallery.getItem(incr).setMnemonic(incr);
                    WTFileReader fileReader = new WTFileReader(galleryItems[i]);
                    if(fileReader.validateJT())
                        hintManager.addHintFor(menuGallery.getItem(incr),fileReader.loadJTScript().getDescription());
                    final java.io.File loadFile = galleryItems[i];                                                       
                    final jTRACEMDI guiPointer = this;
                    menuGallery.getItem(incr).addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            setCursor(new Cursor(Cursor.WAIT_CURSOR));            
                            edu.uconn.psy.jtrace.IO.WTFileReader fileReader = new edu.uconn.psy.jtrace.IO.WTFileReader(loadFile);
                            if(!fileReader.validateJT()){ 
                                setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                                return;
                            }                        
                            edu.uconn.psy.jtrace.Model.Scripting.TraceScript script = fileReader.loadJTScript();                            
                            script.setGuiPointer(guiPointer);
                            if(script.getTotalIterations()>1){
                                script.interpret(makeProgressBar());           
                            }
                            else{
                                script.setFileName(loadFile);
                                script.interpretScript();
                            }
                            setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                        }
                    });   
                    incr++;
                }
            }
        }
    }
    
    private void menuItemCloseAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemCloseAllActionPerformed
        JInternalFrame [] frames = desktopPane.getAllFrames();
        
        for (int i = 0; i < frames.length; i++)
        {
            // make sure it's a jTRACE
            if (frames[i].getClass() == jTRACE.class)
            {
                if (saveOnQuit((jTRACE)frames[i]) != 2)
                {
                    // close
                    frames[i].dispose();
                }
            }
        }
    }//GEN-LAST:event_menuItemCloseAllActionPerformed

    /**
     * Tile the windows. The scripting window is hidden. Then the other windows
     * are counted and a geometry is decided on. Then the actual tiling happens.
     * If there are more than maxTiles (12) frames, then just cascade.
     */
    private void menuItemTileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemTileActionPerformed
        int maxTiles = 12;
        
        JInternalFrame [] frames = desktopPane.getAllFramesInLayer(desktopPane.DEFAULT_LAYER.intValue()) ;
        
        // this is all of the frames in either layer, minus the one for the 
        // scripting frame, which will be minimized.
        // (under MacOS, minimized frames get put in a different layer.)
        int numFrames = desktopPane.getAllFramesInLayer(desktopPane.DEFAULT_LAYER.intValue()).length + desktopPane.getAllFramesInLayer(desktopPane.PALETTE_LAYER.intValue()).length - 1;
        
        if (numFrames > maxTiles)
            menuItemCascadeActionPerformed(evt);    // give up!
        
        int rows = (int)Math.ceil(Math.sqrt(numFrames));
        int cols = rows;
        
        // decide on layout
        if (numFrames == 1)
        { rows = 1; cols = 1; }
        else if (numFrames == 2)
        { rows = 2; cols = 1; }
        else if (numFrames <= 4)
        { rows = 2; cols = 2; }
        else if (numFrames <= 6)
        { rows = 3; cols = 2; }
        else if (numFrames <= 9)
        { rows = 3; cols = 3; }
        else if (numFrames <= 12)
        { rows = 4; cols = 3; } 
        // else, take square root of numFrames and round up
        
        // now, figure out the width and height of each child window
        Dimension ourSize = desktopPane.getSize();
        int width = (int)(ourSize.getWidth() / cols);
        int height = (int)(ourSize.getHeight() / rows);
        
        int tile = 1;
        for (int i = 0; i < frames.length; i++)
        {
            if (frames[i].getClass() == ScriptingFrame.class)
            {
                try {
                    frames[i].setIcon(true);
                } catch (java.beans.PropertyVetoException e) {}    
            }
            else
            {
                int xLoc = width * (int)((tile - 1) / rows);
                int yLoc = height * (int)((tile - 1) % rows);
                frames[i].setSize(width, height);
                frames[i].setLocation(xLoc, yLoc);
                
                //System.out.println(tile + ": " + xLoc + ", " + yLoc + "   " + width + "," + height);
                
                tile++;
                
//                try {
//                    frames[i].setSelected(true);
//                } catch (java.beans.PropertyVetoException e) {}
            }
        }
    }//GEN-LAST:event_menuItemTileActionPerformed

    public void tile(){
        menuItemTileActionPerformed(new java.awt.event.ActionEvent(this,0,""));
    }
    
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (tryToExit())
            System.exit(0);
    }//GEN-LAST:event_formWindowClosing

    private void menuItemSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemSaveAsActionPerformed
        // identify the active window (making sure it's not the scripting window)
        JInternalFrame activeFrame = desktopPane.getSelectedFrame();
        if (activeFrame == null)        // nothing selected
            return;
        if (activeFrame.getClass() != jTRACE.class) // not a valid type of window
            return;
        jTRACE activeJT = (jTRACE)activeFrame;  // synonym
        
        // OK, get a filename from the user
        // pop up a file-save box 
        JFileChooser fileChooser = new JFileChooser(traceProperties.rootPath.getAbsolutePath());
        
        fileChooser.setDialogType(JFileChooser.SAVE_DIALOG);
        fileChooser.setDialogTitle("Save jTRACE parameters to file");
        fileChooser.setFileFilter(new edu.uconn.psy.jtrace.IO.XMLFileFilter());
        
        int returnVal = fileChooser.showSaveDialog(this);
        
        if (returnVal == JFileChooser.APPROVE_OPTION) 
        {
            java.io.File saveFile = fileChooser.getSelectedFile();
        
            // update our title with the jTRACE object and in the Window menu
            activeJT.setJtFilename(saveFile);
            JMenuItem menuItem = windowMenuList.getJMI(windowMenuList.indexOf(activeJT));
            menuItem.setText(saveFile.getName());

            // and save (since we set jtFilename, will save, not recurse)
            menuItemSaveActionPerformed(evt);

        }
        // else, cancelled
    }//GEN-LAST:event_menuItemSaveAsActionPerformed

    private void menuItemSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemSaveActionPerformed
        // identify the active window (making sure it's not the scripting window)
        JInternalFrame activeFrame = desktopPane.getSelectedFrame();
        if (activeFrame == null)        // nothing selected
            return;
        if (activeFrame.getClass() != jTRACE.class) // not a valid type of window
            return;
        jTRACE activeJT = (jTRACE)activeFrame;  // synonym
        
        // if we've got a filename, use it, otherwise just do a Save As
        if (activeJT.getJtFilename() != null)
        {

            //save the TraceSim, TraceSimAnalysis and CurrGraphParameters to .jt file.
            String result="";
            result+="<?xml version=\"1.0\" encoding=\"UTF-8\"?>"+
                "<jt xmlns=\'http://xml.netbeans.org/examples/targetNS\'"+
                "\nxmlns:xsi=\'http://www.w3.org/2001/XMLSchema-instance\'"+
                "\nxsi:schemaLocation=\'http://xml.netbeans.org/examples/targetNS file:"+edu.uconn.psy.jtrace.UI.jTRACEMDI.properties.rootPath.getAbsolutePath()+"/Schema/jTRACESchema.xsd\'>";
            result+="<script>";
            result+=activeJT.getSim().XMLTag();
            result+=activeJT.getSimAnalysis().XMLTag();
            result+=activeJT.getGraphParams().XMLTag();
            result+="<action><set-cycles-per-sim><cycles>"+activeJT.getSim().getStepsRun()+"</cycles></set-cycles-per-sim></action>";                    
            result+="<action><new-window><arg>n/a</arg></new-window></action>";                    
            result+="</script>";
            result+="</jt>";
                
            edu.uconn.psy.jtrace.IO.WTFileWriter fw=new edu.uconn.psy.jtrace.IO.WTFileWriter(activeJT.getJtFilename(),false);

            fw.writeAndClose(result);
            
            // tell the jTRACE that it's been saved
            activeJT.youveBeenSaved();
        }
        else
            menuItemSaveAsActionPerformed(evt); // get a filename and try again
        
    }//GEN-LAST:event_menuItemSaveActionPerformed

    private void menuItemLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemLoadActionPerformed
        // OK, get a filename from the user
        // pop up a file-load box 
        JFileChooser fileChooser = new JFileChooser(traceProperties.rootPath.getAbsolutePath());
        
        fileChooser.setDialogType(JFileChooser.OPEN_DIALOG);
        fileChooser.setDialogTitle("Load jTRACE parameters from a file");
        fileChooser.setFileFilter(new edu.uconn.psy.jtrace.IO.XMLFileFilter());
        
        int returnVal = fileChooser.showOpenDialog(this);
        
        if (returnVal == JFileChooser.APPROVE_OPTION) 
        {
            setCursor(new Cursor(Cursor.WAIT_CURSOR));
            
            java.io.File loadFile = fileChooser.getSelectedFile();
            
            // try to read it
            edu.uconn.psy.jtrace.IO.WTFileReader fileReader = new edu.uconn.psy.jtrace.IO.WTFileReader(loadFile);

            if(!fileReader.validateJT()){ 
                //System.out.println("hold up!");
                setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                return;
            }                        
            edu.uconn.psy.jtrace.Model.Scripting.TraceScript script = fileReader.loadJTScript();
            
            script.setGuiPointer(this);
            
            if(script.getTotalIterations()>1){
                String message = "This JT document is a script. It could load multiple\n" +
                                 "windows or generate external files. Run the script, \n" +
                                 "edit it in the scripting panel, or cancel?\n";                                                
                
                Object[] options = {"Run script",
                                "Edit script",
                                "Cancel"};
                                
                int result = JOptionPane.showOptionDialog(null,
                    message,
                    "Question",
                    JOptionPane.YES_NO_CANCEL_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    options,
                    options[2]);

                if (result == 0)    // run script
                {
                    script.interpret(makeProgressBar());            
                }
                else if (result == 1) // edit script
                {
                    if (null==scriptFrame) return;
                    try{
                        scriptFrame.setSelected(true);
                        desktopPane.setSelectedFrame(scriptFrame);
                    }
                    catch(java.beans.PropertyVetoException e)
                    {
                        // i care?
                    }
                    //scriptPanel.loadAScript(loadFile);                        
                }
                else {
                    return;
                }
            }
            else
            {
                script.setFileName(loadFile);
                script.interpretScript();
            }
            
            setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        }
            
        //loadJTRACEFrame(new TraceParam(), null, new TraceSimAnalysis(), new GraphParameters(), loadFile);        
    }//GEN-LAST:event_menuItemLoadActionPerformed

    private javax.swing.JDialog makeProgressBar(){
        javax.swing.JProgressBar progressBar=new javax.swing.JProgressBar(0,100);
        progressBar.setValue(0);
        progressBar.setVisible(true);        
        progressBar.setSize(250,50);
        progressBar.setMinimumSize(new java.awt.Dimension(250, 50));
        progressBar.setPreferredSize(new java.awt.Dimension(250, 50));
        javax.swing.JDialog progressFrame=new javax.swing.JDialog(this,"jTRACE Script Progress",false);
        javax.swing.JLabel progressLabel=new javax.swing.JLabel("Working ... ");
        progressFrame.getContentPane().setLayout(new java.awt.BorderLayout());
        progressFrame.getContentPane().add(progressBar);
        progressBar.setStringPainted(true);
        progressBar.setVisible(true);        
        progressLabel.setSize(250,50);
        javax.swing.JButton progressCancelButton = new javax.swing.JButton("cancel");
        progressFrame.getContentPane().setLayout(new java.awt.BorderLayout());
        progressFrame.getContentPane().add(progressBar,java.awt.BorderLayout.NORTH);        
        progressFrame.getContentPane().add(progressCancelButton,java.awt.BorderLayout.CENTER);
        progressFrame.getContentPane().add(progressLabel,java.awt.BorderLayout.SOUTH);
        progressBar.setStringPainted(true);
        progressFrame.setSize(250,75);
        progressFrame.setLocation(400,400);       
        progressFrame.pack();
        progressFrame.setVisible(true);
        return progressFrame;
    }
    
    private void menuItemCloneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemCloneActionPerformed
        // identify the active window (making sure it's not the scripting window)
        JInternalFrame activeFrame = desktopPane.getSelectedFrame();
        if (activeFrame == null)        // nothing selected
            return;
        if (activeFrame.getClass() != jTRACE.class) // not a valid type of window
            return;
            
        // clone the TraceParam, GraphParameters, and TraceSimAnalysis objects from the window
        TraceParam newParam = new TraceParam(((jTRACE)activeFrame).getParam());
        GraphParameters newGPs = new GraphParameters(((jTRACE)activeFrame).getGraphParams());
        TraceSimAnalysis newTSA = new TraceSimAnalysis(((jTRACE)activeFrame).getSimAnalysis());
        
        // create a new document with the new objects
        loadJTRACEFrame(newParam, null, newTSA, newGPs, null);
        
    }//GEN-LAST:event_menuItemCloneActionPerformed

    private void menuItemScriptingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemScriptingActionPerformed
        // find the scripting frame
        
        JInternalFrame [] frames = desktopPane.getAllFrames();
        
        for (int i = 0; i < frames.length; i++)
        {
            if (frames[i].getTitle().equals("Scripting"))
            {
                try {
                frames[i].setSelected(true);
                frames[i].setVisible(true);
                frames[i].setIcon(false);
                } catch (java.beans.PropertyVetoException e) {}
            }
                
        }
    }//GEN-LAST:event_menuItemScriptingActionPerformed

    private void menuItemHelpContentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemHelpContentsActionPerformed
        if(helpFrame==null){
            helpFrame = new HelpFrame(properties);            
        }
        helpFrame.setVisible(true);
        helpFrame.setEnabled(true);
    }//GEN-LAST:event_menuItemHelpContentsActionPerformed

    private void menuItemCascadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemCascadeActionPerformed
        JInternalFrame [] frames = desktopPane.getAllFrames();
        
        for (int i = 0; i < frames.length; i++)
        {
            frames[i].setSize(1000, 700);
            frames[i].setLocation(jTRACE.xOffset * i, jTRACE.yOffset * i);
            try {
                frames[i].setSelected(true);
            } catch (java.beans.PropertyVetoException e) {}
        }

    }//GEN-LAST:event_menuItemCascadeActionPerformed
    
    public void cascade(){
        menuItemCascadeActionPerformed(new java.awt.event.ActionEvent(this,0,""));
    }
    private void menuItemAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemAboutActionPerformed
        new AboutFrame().setVisible(true);
    
    }//GEN-LAST:event_menuItemAboutActionPerformed

    private void menuItemNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemNewActionPerformed
        addJTRACEFrame();
    }//GEN-LAST:event_menuItemNewActionPerformed

    private void exitHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitHandler
        if (tryToExit())
            System.exit(0);
    }//GEN-LAST:event_exitHandler
    
    /**
     * Close child windows. 
     *
     * @returns     true if caller can quit the application, false if not
     */
    private boolean tryToExit()
    {
        // loop through the windows and close the jTRACEs, checking for needing to
        // save
        
        JInternalFrame [] frames = desktopPane.getAllFrames();
        
        for (int i = 0; i < frames.length; i++)
        {
            if (frames[i].getClass() == jTRACE.class)
            {
                if (saveOnQuit((jTRACE)frames[i]) == 2) // if cancel selected
                    return false;
            }
        }
        
        return true;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        //GUI instantiation
        if(null==args||args.length==0){
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    new jTRACEMDI().setVisible(true);
                }
            });
        }
        //Remote/Script-processing instantiation
        else{
            edu.uconn.psy.jtrace.UI.CommandLineUI ui = new edu.uconn.psy.jtrace.UI.CommandLineUI(args);
            ui.execute();                        
        }
    }
    
    private void addScriptingFrame(traceProperties props) 
    {        
        try{
            
            scriptFrame = new ScriptingFrame(this);
            scriptFrame.setGuiPointer(this);
            scriptFrame.setPreferredSize(new java.awt.Dimension(800, 650));
            scriptFrame.setMinimumSize(new java.awt.Dimension(300, 200));
            scriptFrame.setMaximumSize(new java.awt.Dimension(1200, 900));
            scriptFrame.setSize(800, 650);
                    
            desktopPane.add(scriptFrame);        
            scriptFrame.setVisible(true);
            scriptFrame.setIcon(true);
            
        }
        catch(Exception e){e.printStackTrace();}          
    }
    
    /**
     * Create a new jTRACE object/frame with default parameters.
     */
    private void addJTRACEFrame() {
        loadJTRACEFrame(null, null, null, null, null);
    }
    private void addJTRACEFrame(File file)
    {
        loadJTRACEFrame(null, null, null, null, file);
    }
    
    /**
     * Load a jTRACE frame with specified objects. 
     *
     * @param   file    may be null if no associated file
     */
    public void loadJTRACEFrame(TraceParam param, TraceSim sim, TraceSimAnalysis anal, GraphParameters gp, File file) 
    {
        
        if (openWindows < maxOpenWindows)
        {
            createdWindows++;   // needs to be first to get title right
            
            // create a new jTRACE frame
            jTRACE jFrame;
            if (param == null)
                jFrame = new jTRACE(properties);
            else
                jFrame = new jTRACE(properties, param,sim,anal,gp, file);

            // catch frame events
            jFrame.addInternalFrameListener(this);
            
            // sims that have been run are typically intended for graphing.
            if(null != sim)
                if(sim.getStepsRun()>0) {
                    jFrame.setFrameAll(sim.getStepsRun());
                    jFrame.setActiveTab(jFrame.TAB_INDEX_GRAPHING);
                    jFrame.getGraphPanel().setSplitPane(0.0);
                }
            jFrame.setVisible(true);
            desktopPane.add(jFrame);            
            try {
                jFrame.setSelected(true);
                jFrame.requestFocus();
            } catch (java.beans.PropertyVetoException e) {}
            
                     
            // create the Window menu item
            JMenuItem menuItem = new JMenuItem(jFrame.getWindowTitle(),
                    java.awt.event.KeyEvent.VK_1 + createdWindows-1);
            menuItem.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    menuItemWindowListActionPerformed(evt);
                }
            });
            // add to our list
            windowMenuList.add(menuItem, jFrame);

            // and add to the menu itself
            menuWindow.add(menuItem);   
            
        }
        // else, pop up a warning?
    }

    public void menuItemWindowListActionPerformed(java.awt.event.ActionEvent evt) {
        // look at evt to figure out which window was asked for
        JMenuItem evtItem = (JMenuItem)evt.getSource();
        
        // figure out what the associate jTRACE was
        int idx = windowMenuList.indexOf(evtItem);
        if (idx >= 0)
        {
            jTRACE jt = windowMenuList.getJT(idx);
            
            // bring it to the top and make sure it's not minimized
            try {
                jt.setIcon(false);
                jt.setSelected(true);
                jt.requestFocus();
            } catch (java.beans.PropertyVetoException e) {}
            
        }
        
        
    }
    
    /**
     * Figure out the name of a new window with unsaved data.
     */
    public static String getNextTitle()
    {
        return "Untitled #" + (new Integer(createdWindows)).toString();
    }
    /*public ParametersPanel getBaseParametersPanel(){
        return scriptPanel.getBaseParametersPanel();
    }*/
    
    public static int getCreatedWindows()
    {
        return createdWindows;
    }

    //
    
    /**
     * Close the frame, checking for save.
     */
    public void internalFrameClosing(InternalFrameEvent e) {
        
        // make sure it's a jTRACE
        if (e.getInternalFrame().getClass() == jTRACE.class)
        {
            jTRACE closingFrame = (jTRACE)e.getInternalFrame();
            
            if (saveOnQuit(closingFrame) != 2)
            {
                // delete it from the Window menu
                int idx = windowMenuList.indexOf(closingFrame);
                menuWindow.remove(windowMenuList.getJMI(idx));
                windowMenuList.delete(idx);
                
                // close
                closingFrame.dispose();
            }
        }
    }
    
    /**
     * Utility method to check (asking the user if necessary) if a jTRACE should 
     * saved before quitting, and does the save. Does NOT do the quit.
     *
     * @param frame     jTRACE frame to close
     * @return          0 if saved, 1 if not saved, 2 to abort
     */
    private int saveOnQuit(jTRACE closingFrame)
    {
          // if the param object's been updated since we saved
        if (closingFrame.needToSave())
        {
            // ask the user whether to save, not save, or cancel
            //Custom button text
            Object[] options = {"Save",
                                "Don't save",
                                "Cancel"};
            int result = JOptionPane.showOptionDialog(null,
                closingFrame.getWindowTitle() + " has been modified. Save?",
                "Question",
                JOptionPane.YES_NO_CANCEL_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                options,
                options[2]);

            if (result == 0)    // save
            {
                // argument is ignored...
                menuItemSaveActionPerformed(new java.awt.event.ActionEvent(this, 0, ""));
            }
            
            return result;
        }
        
        return 1;   // didn't save
    }

    public void internalFrameClosed(InternalFrameEvent e) {
        openWindows--;
        
        // @@@ remove from window menu list
    }

    public void internalFrameOpened(InternalFrameEvent e) {
        openWindows++;
    }

    public void internalFrameIconified(InternalFrameEvent e) {
        // no-op
    }

    public void internalFrameDeiconified(InternalFrameEvent e) {
        // no-op
    }

    public void internalFrameActivated(InternalFrameEvent e) {
        // if a jTRACE, enable Load, Save, etc.
        boolean isjTraceFrame = (e.getInternalFrame().getClass() == jTRACE.class);
        boolean isValidationFrame;
        if(isjTraceFrame) isValidationFrame=((jTRACE)e.getInternalFrame()).isValidationFrame();
        else isValidationFrame=false;
        
        //System.out.println("internalFrameActivated "+isjTraceFrame+" "+isValidationFrame);
        menuItemLoad.setEnabled(isjTraceFrame);
        menuItemSave.setEnabled(isjTraceFrame&&!isValidationFrame);
        menuItemSaveAs.setEnabled(isjTraceFrame&&!isValidationFrame);
        menuItemClone.setEnabled(isjTraceFrame&&!isValidationFrame);
        
    }

    public void internalFrameDeactivated(InternalFrameEvent e) {
        // no-op
    }
    
    /**
     * We'll want hints for the menu options and that's about it.
     */
    public void initHints() 
    {
        hintManager.addHintFor(menuItemAbout, "About jTRACE");
        hintManager.addHintFor(menuItemCascade, "Cascade all windows");
        hintManager.addHintFor(menuItemClone, "Create a clone of the current sim");
        hintManager.addHintFor(menuItemCloseAll, "Close all windows");
        hintManager.addHintFor(menuItemExit, "Quit jTRACE");
        hintManager.addHintFor(menuItemHelpContents, "Show jTRACE user manual");
        hintManager.addHintFor(menuItemLoad, "Load jTRACE simulation file");
        hintManager.addHintFor(menuItemNew, "Create new simulation with default parameters");
        //hintManager.addHintFor(menuItemProperties, "Configure jTRACE");
        hintManager.addHintFor(menuItemSave, "Save jTRACE simulation to file");
        hintManager.addHintFor(menuItemSaveAs, "Save jTRACE simulation to new file");
        hintManager.addHintFor(menuItemScripting, "Show scripting window");
        hintManager.addHintFor(menuItemTile, "Tile all windows");
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDesktopPane desktopPane;
    private javax.swing.JLabel hintBar;
    private javax.swing.JTextPane infoTextPane;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenu menuGallery;
    private javax.swing.JMenu menuHelp;
    private javax.swing.JMenuItem menuItemAbout;
    private javax.swing.JMenuItem menuItemCascade;
    private javax.swing.JMenuItem menuItemClone;
    private javax.swing.JMenuItem menuItemCloseAll;
    private javax.swing.JMenuItem menuItemExit;
    private javax.swing.JMenuItem menuItemHelpContents;
    private javax.swing.JMenuItem menuItemLoad;
    private javax.swing.JMenuItem menuItemNew;
    private javax.swing.JMenuItem menuItemSave;
    private javax.swing.JMenuItem menuItemSaveAs;
    private javax.swing.JMenuItem menuItemScripting;
    private javax.swing.JMenuItem menuItemTile;
    private javax.swing.JMenu menuWindow;
    // End of variables declaration//GEN-END:variables
    private ScriptingFrame scriptFrame;    
    private HelpFrame helpFrame;
}
