/*
 * InputPanel.java
 *
 * Created on July 10, 2007, 7:57 PM
 */

package edu.uconn.psy.jtrace.UI;
import edu.uconn.psy.jtrace.IO.*;
import edu.uconn.psy.jtrace.Model.*;
import javax.swing.*;
import javax.swing.event.*;
import javax.swing.table.*;
import java.util.*;
import org.jdesktop.layout.GroupLayout;

/**
 *
 * @author  tedstrauss
 */
public class InputPanel extends javax.swing.JPanel implements TableModelListener{
    TraceParam parameters;    
    TraceSim sim;
    InputSimGraph vizgraph;
    boolean muteListeners;
    
    /** Creates new form InputPanel */
    public InputPanel(TraceParam _tp, TraceSim _sim) {
        muteListeners=false;
        parameters = _tp;
        sim = _sim;
        initComponents();
        initComponentsCustom();
        varsToGUI();
        registerListeners();        
    }
    public void notify(TraceParam _tp, TraceSim _sim){
        parameters = _tp;
        sim = _sim;
        varsToGUI();
        highlightGUIforPhonSpec();
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        titleLabel1 = new javax.swing.JLabel();
        titleLabel2 = new javax.swing.JLabel();
        phonemeInputScrollPane = new javax.swing.JScrollPane();
        phonemeInputTable = new javax.swing.JTable();
        tabbedPane1 = new javax.swing.JTabbedPane();
        normalPhonePanel = new javax.swing.JPanel();
        normText1 = new javax.swing.JLabel();
        normCombo1 = new javax.swing.JComboBox();
        ambiguousPhonePanel = new javax.swing.JPanel();
        continuumCheckbox = new javax.swing.JCheckBox();
        ambigText1 = new javax.swing.JLabel();
        ambigCombo1 = new javax.swing.JComboBox();
        ambigText2 = new javax.swing.JLabel();
        ambigCombo2 = new javax.swing.JComboBox();
        ambigText3 = new javax.swing.JLabel();
        ambigCombo3 = new javax.swing.JComboBox();
        ambigText4 = new javax.swing.JLabel();
        ambigCombo4 = new javax.swing.JComboBox();
        ambigText5 = new javax.swing.JLabel();
        splicedPhonePanel = new javax.swing.JPanel();
        splicedText1 = new javax.swing.JLabel();
        splicedHelpButton = new javax.swing.JButton();
        splicedText2 = new javax.swing.JLabel();
        splicedCombo1 = new javax.swing.JComboBox();
        splicedText3 = new javax.swing.JLabel();
        splicedCombo2 = new javax.swing.JComboBox();
        splicedText5 = new javax.swing.JLabel();
        splicedCombo4 = new javax.swing.JComboBox();
        splicedText6 = new javax.swing.JLabel();
        titleLabel4 = new javax.swing.JLabel();
        helpButton = new javax.swing.JButton();
        addVisualButton = new javax.swing.JButton();
        tabbedPane2 = new javax.swing.JTabbedPane();
        mainVisualizerPanel = new javax.swing.JPanel();
        titleLabel3 = new javax.swing.JLabel();
        infoLabel1 = new javax.swing.JLabel();
        titleLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        parameterTable1 = new javax.swing.JTable();

        titleLabel1.setText("Input Specification -");

        titleLabel2.setFont(new java.awt.Font("Lucida Grande", 0, 10));
        titleLabel2.setText("\"\"");

        phonemeInputScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        phonemeInputTable.setFont(new java.awt.Font("Lucida Grande", 0, 16));
        phonemeInputTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"-", "^", "b", "r", "^", "p", "t", "-", null, null, null, null, null, null, null, null}
            },
            new String [] {
                "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        phonemeInputTable.setGridColor(new java.awt.Color(204, 255, 204));
        phonemeInputTable.setRowSelectionAllowed(false);
        phonemeInputTable.setSelectionBackground(new java.awt.Color(0, 0, 0));
        phonemeInputTable.setSelectionForeground(new java.awt.Color(153, 255, 255));
        phonemeInputTable.setShowHorizontalLines(false);
        phonemeInputTable.setTableHeader(null);
        phonemeInputTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                phonemeInputTableKeyTyped(evt);
            }
            public void keyPressed(java.awt.event.KeyEvent evt) {
                phonemeInputTableKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                phonemeInputTableKeyReleased(evt);
            }
        });
        phonemeInputTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                phonemeInputTableMousePressed(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                phonemeInputTableMouseClicked(evt);
            }
        });

        phonemeInputScrollPane.setViewportView(phonemeInputTable);

        tabbedPane1.setFont(new java.awt.Font("Lucida Grande", 0, 10));
        normText1.setFont(new java.awt.Font("Lucida Grande", 0, 10));
        normText1.setText("Insert this phoneme: ");

        normCombo1.setFont(new java.awt.Font("Lucida Grande", 0, 10));
        normCombo1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        normCombo1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                normCombo1ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout normalPhonePanelLayout = new org.jdesktop.layout.GroupLayout(normalPhonePanel);
        normalPhonePanel.setLayout(normalPhonePanelLayout);
        normalPhonePanelLayout.setHorizontalGroup(
            normalPhonePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(normalPhonePanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(normText1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(normCombo1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(303, Short.MAX_VALUE))
        );
        normalPhonePanelLayout.setVerticalGroup(
            normalPhonePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(normalPhonePanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(normalPhonePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(normText1)
                    .add(normCombo1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(63, Short.MAX_VALUE))
        );
        tabbedPane1.addTab("Normal", normalPhonePanel);

        continuumCheckbox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        continuumCheckbox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        continuumCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                continuumCheckboxActionPerformed(evt);
            }
        });

        ambigText1.setFont(new java.awt.Font("Lucida Grande", 0, 10));
        ambigText1.setText(" Activate a  ");

        ambigCombo1.setFont(new java.awt.Font("Lucida Grande", 0, 10));
        ambigCombo1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "3", "4", "5", "6", "7", "8", "9" }));
        ambigCombo1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ambigCombo1ActionPerformed(evt);
            }
        });

        ambigText2.setFont(new java.awt.Font("Lucida Grande", 0, 10));
        ambigText2.setText("  step continuum, from  ");

        ambigCombo2.setFont(new java.awt.Font("Lucida Grande", 0, 10));
        ambigCombo2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        ambigCombo2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ambigCombo2ActionPerformed(evt);
            }
        });

        ambigText3.setFont(new java.awt.Font("Lucida Grande", 0, 10));
        ambigText3.setText(" to ");

        ambigCombo3.setFont(new java.awt.Font("Lucida Grande", 0, 10));
        ambigCombo3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        ambigCombo3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ambigCombo3ActionPerformed(evt);
            }
        });

        ambigText4.setFont(new java.awt.Font("Lucida Grande", 0, 10));
        ambigText4.setText("Insert this member of the continuum: ");

        ambigCombo4.setFont(new java.awt.Font("Lucida Grande", 0, 10));
        ambigCombo4.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3" }));
        ambigCombo4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ambigCombo4ActionPerformed(evt);
            }
        });

        ambigText5.setFont(new java.awt.Font("Lucida Grande", 0, 10));
        ambigText5.setText("(note: only one phoneme continuum per simulation is permitted.)");

        org.jdesktop.layout.GroupLayout ambiguousPhonePanelLayout = new org.jdesktop.layout.GroupLayout(ambiguousPhonePanel);
        ambiguousPhonePanel.setLayout(ambiguousPhonePanelLayout);
        ambiguousPhonePanelLayout.setHorizontalGroup(
            ambiguousPhonePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(ambiguousPhonePanelLayout.createSequentialGroup()
                .add(continuumCheckbox)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(ambiguousPhonePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(ambiguousPhonePanelLayout.createSequentialGroup()
                        .add(ambigText1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(ambigCombo1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(ambigText2)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(ambigCombo2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(ambigText3)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(ambigCombo3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(ambiguousPhonePanelLayout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(ambiguousPhonePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(ambigText5)
                            .add(ambiguousPhonePanelLayout.createSequentialGroup()
                                .add(ambigText4)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(ambigCombo4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(66, Short.MAX_VALUE))
        );
        ambiguousPhonePanelLayout.setVerticalGroup(
            ambiguousPhonePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(ambiguousPhonePanelLayout.createSequentialGroup()
                .add(ambiguousPhonePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(continuumCheckbox)
                    .add(ambigText1)
                    .add(ambigCombo1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(ambigText2)
                    .add(ambigCombo2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(ambigText3)
                    .add(ambigCombo3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(ambiguousPhonePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(ambigCombo4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(ambigText4))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 15, Short.MAX_VALUE)
                .add(ambigText5)
                .addContainerGap())
        );
        tabbedPane1.addTab("Ambiguous", ambiguousPhonePanel);

        splicedText1.setFont(new java.awt.Font("Lucida Grande", 0, 10));
        splicedText1.setText("Spliced phonemes are used to create 'sub-categorical mismatch' stimuli.");

        splicedHelpButton.setFont(new java.awt.Font("Lucida Grande", 0, 10));
        splicedHelpButton.setText("?");
        splicedHelpButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        splicedHelpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                splicedHelpButtonActionPerformed(evt);
            }
        });

        splicedText2.setFont(new java.awt.Font("Lucida Grande", 0, 10));
        splicedText2.setText("First phoneme:");

        splicedCombo1.setFont(new java.awt.Font("Lucida Grande", 0, 10));
        splicedCombo1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        splicedCombo1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                splicedCombo1ActionPerformed(evt);
            }
        });

        splicedText3.setFont(new java.awt.Font("Lucida Grande", 0, 10));
        splicedText3.setText("Second phoneme: ");

        splicedCombo2.setFont(new java.awt.Font("Lucida Grande", 0, 10));
        splicedCombo2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        splicedCombo2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                splicedCombo2ActionPerformed(evt);
            }
        });

        splicedText5.setFont(new java.awt.Font("Lucida Grande", 0, 10));
        splicedText5.setText("First phoneme will extend for ");

        splicedCombo4.setFont(new java.awt.Font("Lucida Grande", 0, 10));
        splicedCombo4.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "8", "7", "6", "5", "4", "3", "2", "1" }));
        splicedCombo4.setSelectedIndex(4);
        splicedCombo4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                splicedCombo4ActionPerformed(evt);
            }
        });

        splicedText6.setFont(new java.awt.Font("Lucida Grande", 0, 10));
        splicedText6.setText("slices, then the second is spliced in from that point on.");

        org.jdesktop.layout.GroupLayout splicedPhonePanelLayout = new org.jdesktop.layout.GroupLayout(splicedPhonePanel);
        splicedPhonePanel.setLayout(splicedPhonePanelLayout);
        splicedPhonePanelLayout.setHorizontalGroup(
            splicedPhonePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(splicedPhonePanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(splicedPhonePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(splicedPhonePanelLayout.createSequentialGroup()
                        .add(splicedText1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(splicedHelpButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(splicedPhonePanelLayout.createSequentialGroup()
                        .add(splicedText2)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(splicedCombo1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(splicedText3)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(splicedCombo2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(splicedPhonePanelLayout.createSequentialGroup()
                        .add(splicedText5)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(splicedCombo4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(splicedText6)))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        splicedPhonePanelLayout.setVerticalGroup(
            splicedPhonePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(splicedPhonePanelLayout.createSequentialGroup()
                .add(splicedPhonePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(splicedText1)
                    .add(splicedHelpButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 13, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(splicedPhonePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(splicedText2)
                    .add(splicedCombo1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(splicedText3)
                    .add(splicedCombo2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(splicedPhonePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(splicedText5)
                    .add(splicedCombo4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(splicedText6))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        tabbedPane1.addTab("Spliced", splicedPhonePanel);

        titleLabel4.setFont(new java.awt.Font("Lucida Grande", 0, 10));
        titleLabel4.setText("Visualization");

        helpButton.setFont(new java.awt.Font("Lucida Grande", 0, 11));
        helpButton.setText("?");
        helpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpButtonActionPerformed(evt);
            }
        });

        addVisualButton.setFont(new java.awt.Font("Lucida Grande", 0, 10));
        addVisualButton.setText("+");
        addVisualButton.setToolTipText("Press this button to make a copy (a new tab) of the input visualization window that can be referenced against other input specifications.");
        addVisualButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        addVisualButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addVisualButtonActionPerformed(evt);
            }
        });

        tabbedPane2.setFont(new java.awt.Font("Lucida Grande", 0, 10));
        mainVisualizerPanel.setFont(new java.awt.Font("Lucida Grande", 0, 10));
        org.jdesktop.layout.GroupLayout mainVisualizerPanelLayout = new org.jdesktop.layout.GroupLayout(mainVisualizerPanel);
        mainVisualizerPanel.setLayout(mainVisualizerPanelLayout);
        mainVisualizerPanelLayout.setHorizontalGroup(
            mainVisualizerPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 492, Short.MAX_VALUE)
        );
        mainVisualizerPanelLayout.setVerticalGroup(
            mainVisualizerPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 31, Short.MAX_VALUE)
        );
        tabbedPane2.addTab("viz", mainVisualizerPanel);

        titleLabel3.setFont(new java.awt.Font("Lucida Grande", 0, 10));
        titleLabel3.setText("Selected input-position editor");

        infoLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 8));
        infoLabel1.setText("The input specifications defined here are saved to the current parameter set when you leave this panel.");

        titleLabel5.setFont(new java.awt.Font("Lucida Grande", 0, 10));
        titleLabel5.setText("Input parameters (these are shared with the parameters panel)");

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setFont(new java.awt.Font("Lucida Grande", 0, 10));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(100, 100));
        parameterTable1.setFont(new java.awt.Font("Lucida Grande", 0, 10));
        parameterTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"fslices is the size in time increments of the input buffer.", new Double(99.0)},
                {"deltaInput adds space in between each phoneme representation.", new Double(6.0)},
                {"nreps determines input presentation rate.", new Double(1.0)},
                {"noiseSD adds gaussian noise to the input.", new Double(0.0)},
                {"FETSPREAD.pow", new Double(6.0)},
                {"FETSPREAD.voc", new Double(6.0)},
                {"FETSPREAD.dif", new Double(6.0)},
                {"FETSPREAD.acu", new Double(6.0)},
                {"FETSPREAD.gra", new Double(6.0)},
                {"FETSPREAD.voi", new Double(6.0)},
                {"FETSPREAD.bur", new Double(6.0)}
            },
            new String [] {
                "Parameter description", "Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        parameterTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        parameterTable1.setGridColor(new java.awt.Color(204, 255, 204));
        parameterTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                parameterTable1KeyTyped(evt);
            }
        });

        jScrollPane1.setViewportView(parameterTable1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, tabbedPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 513, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .add(titleLabel4)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(addVisualButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 513, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, tabbedPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 513, Short.MAX_VALUE)
                    .add(phonemeInputScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 513, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .add(titleLabel1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(titleLabel2)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 333, Short.MAX_VALUE)
                        .add(helpButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 34, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, titleLabel3)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, titleLabel5)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, infoLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 513, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(titleLabel1)
                    .add(titleLabel2)
                    .add(helpButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 29, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(phonemeInputScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(titleLabel3)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(tabbedPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 139, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(titleLabel5)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 67, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(titleLabel4)
                    .add(addVisualButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(tabbedPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(infoLabel1)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void parameterTable1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_parameterTable1KeyTyped
        //GUIToVars();
        //updateVisualizationGUI();        
    }//GEN-LAST:event_parameterTable1KeyTyped

    private void phonemeInputTableKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_phonemeInputTableKeyTyped
        highlightGUIforPhonSpec();
    }//GEN-LAST:event_phonemeInputTableKeyTyped

    private void phonemeInputTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_phonemeInputTableKeyPressed
        highlightGUIforPhonSpec();
    }//GEN-LAST:event_phonemeInputTableKeyPressed
    
    private void initComponentsCustom()
    {    
        tabbedPane2.remove(0);
        addVisualButton.setEnabled(false);
        //add visualizer to tabbedPane2    
        double[][] theData;
        if(sim.getStepsRun()>0){
            theData = sim.getInputD()[0];        
            vizgraph = new InputSimGraph(parameters,theData,sim.getMaxDuration(),100,0,1);
            vizgraph.incrementFrame();
            tabbedPane2.addTab(getInputSpecification(),vizgraph);                        
        }
        else{
            TraceSim tempSim = new TraceSim(parameters);
            tempSim.setInputString(getInputSpecification());
            //tempSim.reset();
            tempSim.cycle(1);        
            theData = tempSim.getInputD()[0];                    
            vizgraph = new InputSimGraph(parameters,theData,tempSim.getMaxDuration(),100,0,1);
            vizgraph.incrementFrame();
            tabbedPane2.addTab(getInputSpecification(),vizgraph);                        
        }        
    }
    private void varsToGUI(){
        muteListeners=true;
        
        // parameters into 2nd table
        parameterTable1.setValueAt(new Double(parameters.getFSlices()),0,1);
        parameterTable1.setValueAt(new Double(parameters.getDeltaInput()),1,1);
        parameterTable1.setValueAt(new Double(parameters.getNReps()),2,1);
        parameterTable1.setValueAt(new Double(parameters.getNoiseSD()),3,1);
        
        // setup comboBox models, based on phoneme sets, etc.
        String[] phonComboModel = parameters.getPhonology().getLabels();
        //String[] splicePointComboModel = new String[Math.min((2*parameters.getPhonology().getOffset()),10)];
        //for(int i=0;i<splicePointComboModel.length;i++)
        //    splicePointComboModel[i] = (new Integer(i)).toString();
        // plug the combo models into the combo button objects.
        normCombo1.setModel(new javax.swing.DefaultComboBoxModel(phonComboModel));
        ambigCombo2.setModel(new javax.swing.DefaultComboBoxModel(phonComboModel));
        ambigCombo3.setModel(new javax.swing.DefaultComboBoxModel(phonComboModel));
        splicedCombo1.setModel(new javax.swing.DefaultComboBoxModel(phonComboModel));
        splicedCombo2.setModel(new javax.swing.DefaultComboBoxModel(phonComboModel));
        //splicedCombo4.setModel(new javax.swing.DefaultComboBoxModel(splicePointComboModel));
        
        // check if a phoneme continuum is enable, and dis/enable components accordingly
        if(parameters.getContinuumSpec()==""||parameters.getContinuumSpec()==null||parameters.getContinuumSpec().length()!=3){
            continuumCheckbox.getModel().setSelected(false);
            ambigCombo1.setEnabled(false);
            ambigCombo2.setEnabled(false);
            ambigCombo3.setEnabled(false);
            String[] ambigCombo4model = {"0","1","2"};
            ambigCombo4.setModel(new javax.swing.DefaultComboBoxModel(ambigCombo4model));        
            ambigCombo4.setEnabled(false);            
        }
        else{
            ambigCombo1.setEnabled(true);
            ambigCombo2.setEnabled(true);
            ambigCombo3.setEnabled(true);
            ambigCombo4.setEnabled(true);            
            // now values
            continuumCheckbox.getModel().setSelected(true);
            ambigCombo1.setSelectedItem(parameters.getContinuumSpec().substring(2,3));
            ambigCombo2.setSelectedItem(parameters.getContinuumSpec().substring(0,1));
            ambigCombo3.setSelectedItem(parameters.getContinuumSpec().substring(1,2));                                    
        }
            
        String inString = parameters.getModelInput();
        // set the phon spec string at top
        titleLabel2.setText("\""+inString+"\"");
        // input string into 1st table        
        char[] inArray = inString.trim().toCharArray(); 
        //
        String parser=null;
        for(int i=0,j=0;i<inArray.length;i++){
            if(parser!=null){
                if(inArray[i]=='}'){
                    parser=parser+inArray[i];
                    phonemeInputTable.setValueAt(parser,0,j);
                    parser=null;
                    j++;
                }
                else{
                    parser=parser+inArray[i];                    
                }
            }
            else{
                if(inArray[i]=='{'){
                    parser="{";                    
                }
                else{
                    phonemeInputTable.setValueAt(inArray[i],0,j);
                    j++;
                }
            }
        }
        
        updateVisualizationGUI();
        //
        muteListeners=false;        
    }
    public void GUIToVars(){  
        
        parameters.setModelInput(getInputSpecification());
        parameters.setFSlices(((Double)parameterTable1.getValueAt(0,1)).intValue());
        parameters.setDeltaInput(((Double)parameterTable1.getValueAt(1,1)).intValue());
        parameters.setNReps(((Double)parameterTable1.getValueAt(2,1)).intValue());
        parameters.setNoiseSD(((Double)parameterTable1.getValueAt(3,1)).doubleValue());
        int[] fetspread = {
            (((Double)parameterTable1.getValueAt(4,1)).intValue()),
            (((Double)parameterTable1.getValueAt(5,1)).intValue()),
            (((Double)parameterTable1.getValueAt(6,1)).intValue()),
            (((Double)parameterTable1.getValueAt(7,1)).intValue()),
            (((Double)parameterTable1.getValueAt(8,1)).intValue()),
            (((Double)parameterTable1.getValueAt(9,1)).intValue()),
            (((Double)parameterTable1.getValueAt(10,1)).intValue())            
        };
        parameters.setSpread(fetspread);
    }
    /**
     *Upon selecting a cell in the phonemeInputTable, the target cell remains highlinghted
     *green until a new cell is selected; the phoneme specification in the cell is used to
     *update the GUI elements, so that the status in the two parts of the interface remain
     *synchronized.
     */
    private void highlightGUIforPhonSpec(){
        //resets the bg to white
        DefaultTableCellRenderer whiteRenderer = (new DefaultTableCellRenderer());
        for(int i=0;i<phonemeInputTable.getColumnCount();i++)
            phonemeInputTable.getColumn((new Integer(i+1)).toString()).setCellRenderer(whiteRenderer);        
        
        //check for no selection
        if(phonemeInputTable.getSelectedColumn()==-1){
            //TODO: if no cell is selected, disable all the GUI stuff!
            setEnablePhonSpecGUI(false);
            //tabbedPane1.setEnabled(false);
            return;
        }
        setEnablePhonSpecGUI(true);            
        //now set the target one to green
        DefaultTableCellRenderer greenRenderer = (new DefaultTableCellRenderer());
        greenRenderer.setBackground(java.awt.Color.green);
        phonemeInputTable.getColumn((new Integer(phonemeInputTable.getSelectedColumn()+1)).toString()).setCellRenderer(greenRenderer);
        
        //send the curr cell value into the GUI elements
        Object curr = phonemeInputTable.getValueAt(0,phonemeInputTable.getSelectedColumn());                
        
        if(curr instanceof Character){
            if(((Character)curr).toString().matches("[0-9]")){ //matches digit, i.e. an ambiguous phone
                tabbedPane1.setSelectedIndex(1);
                //ambigCombo4.setSelectedItem((String)curr);
                ambigCombo4.getModel().setSelectedItem(curr);
                //ambigCombo4.requestFocus();
            }
            else{ //not digit, so it's a regular phoneme
                tabbedPane1.setSelectedIndex(0);
                normCombo1.getModel().setSelectedItem(curr);
                //normCombo1.requestFocus();
            }
        }
        else if(curr instanceof String && ((String)curr).length()==1){
            if(((String)curr).matches("[0-9]")){ //matches digit, i.e. an ambiguous phone
                tabbedPane1.setSelectedIndex(1);
                ambigCombo4.getModel().setSelectedItem(curr);
                //ambigCombo4.requestFocus();
            }
            else{ //not digit, so it's a regular phoneme
                tabbedPane1.setSelectedIndex(0);
                normCombo1.getModel().setSelectedItem(curr);
                //normCombo1.requestFocus();
            }
        }
        else if(curr == null){ //it's blank, so we'll start with the normal interface
            tabbedPane1.setSelectedIndex(0);
        }
        else{ //multi char phoneme spec means spliced type
            tabbedPane1.setSelectedIndex(2);
            if(((String)curr).length()==5){
                splicedCombo1.getModel().setSelectedItem(((String)curr).substring(1,2));
                splicedCombo2.getModel().setSelectedItem(((String)curr).substring(3,4));
                splicedCombo4.getModel().setSelectedItem(((String)curr).substring(2,3));
            }
        }        
    }
    /**
     *Responds to value changes in the ... tables.
     */
    public void tableChanged(TableModelEvent e){
        if(!muteListeners){
            //update variables (i.e. update TraceParam obj)
            GUIToVars();
            sim.setInputString(getInputSpecification());
            updateVisualizationGUI();        
            //update the input spec label.        
            titleLabel2.setText("\""+getInputSpecification()+"\"");        
        }
    }
    /**
     *update the input visualizer. (How cute is it, though)                
     */
    public void updateVisualizationGUI(){
        //sim.setInputString(getInputSpecification());
        double[][] theData;
        if(sim.getStepsRun()>0){
            theData = sim.getInputD()[0];        
            tabbedPane2.remove(vizgraph);
            vizgraph = null;        
            vizgraph = new InputSimGraph(parameters,theData,sim.getMaxDuration(),100,0,1);
            vizgraph.incrementFrame();
            tabbedPane2.addTab(getInputSpecification(),vizgraph);                        
        }
        else{
            TraceSim tempSim = new TraceSim(parameters);
            tempSim.setInputString(getInputSpecification());
            tempSim.cycle(1);        
            theData = tempSim.getInputD()[0];                    
            tabbedPane2.remove(vizgraph);
            vizgraph = null;        
            vizgraph = new InputSimGraph(parameters,theData,sim.getMaxDuration(),100,0,1);
            vizgraph.incrementFrame();                
            tabbedPane2.addTab(getInputSpecification(),vizgraph);            
        }                                         
    }
    /**
     *Change the ambigCombo4 model definition in responce to
     *changing continuum settings.
     */
    private void updateAmbiguityGUI(){
        if(!muteListeners){
            int steps = (new Integer(((String)ambigCombo1.getSelectedItem()))).intValue();
            String from = ((String)ambigCombo2.getSelectedItem()).trim();
            String to = ((String)ambigCombo3.getSelectedItem()).trim();

            //update the param.continuumSpec variable
            char[] cCont = new char[3];
            cCont[0]=from.charAt(0);
            cCont[1]=to.charAt(0);
            cCont[2] = (new Integer(steps)).toString().charAt(0);

            parameters.setContinuumSpec(new String(cCont));

            String[] modelDefn = new String[steps];
            modelDefn[0]=from;
            for(int i=1;i<steps-1;i++)
                modelDefn[i]=(new Integer(i)).toString();
            modelDefn[steps-1]=to;
            ambigCombo4.setModel(new javax.swing.DefaultComboBoxModel(modelDefn));
            ambigCombo4.setSelectedIndex(0);
            ambigCombo4.requestFocus();
        }
    }
    /**
     *Changes in the spliced phoneme interface result in 
     *updates to the phoneme specification in the table.
     */
    private void splicedGUItoPhonSpec(){
        String spec = "{";
        spec=spec+splicedCombo1.getSelectedItem();
        spec=spec+splicedCombo4.getSelectedItem();
        spec=spec+splicedCombo2.getSelectedItem();
        spec=spec+"}";        
        phonemeInputTable.setValueAt(spec,0,phonemeInputTable.getSelectedColumn());
    }
    private String getInputSpecification(){
        String phonSpec="";
        for(int i=0;i<phonemeInputTable.getColumnCount();i++)
            if(phonemeInputTable.getValueAt(0,i)!=null)
                phonSpec+=phonemeInputTable.getValueAt(0,i);
        return phonSpec;        
    }
    private void setEnablePhonSpecGUI(boolean enab){
        ambigCombo1.setEnabled(enab);
        ambigCombo2.setEnabled(enab);
        ambigCombo3.setEnabled(enab);
        ambigCombo4.setEnabled(enab);
        continuumCheckbox.setEnabled(enab);
        splicedCombo1.setEnabled(enab);
        splicedCombo2.setEnabled(enab);
        splicedCombo4.setEnabled(enab);
        normCombo1.setEnabled(enab);
        
    }
    private void registerListeners(){
        parameterTable1.getModel().addTableModelListener(this);
        phonemeInputTable.getModel().addTableModelListener(this);        
    }
    
    private void phonemeInputTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_phonemeInputTableKeyReleased
        highlightGUIforPhonSpec();
    }//GEN-LAST:event_phonemeInputTableKeyReleased

    private void phonemeInputTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_phonemeInputTableMousePressed
        highlightGUIforPhonSpec();
    }//GEN-LAST:event_phonemeInputTableMousePressed

    private void phonemeInputTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_phonemeInputTableMouseClicked
        
    }//GEN-LAST:event_phonemeInputTableMouseClicked
    
    private void helpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpButtonActionPerformed
        HelpFrame helpFrame = new HelpFrame(jTRACEMDI.properties);            
        helpFrame.setVisible(true);
        helpFrame.setEnabled(true);
        helpFrame.scrollToLink("#input panel");
    }//GEN-LAST:event_helpButtonActionPerformed

    private void splicedCombo4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_splicedCombo4ActionPerformed
        splicedGUItoPhonSpec();
    }//GEN-LAST:event_splicedCombo4ActionPerformed

    private void splicedCombo2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_splicedCombo2ActionPerformed
        splicedGUItoPhonSpec();
    }//GEN-LAST:event_splicedCombo2ActionPerformed

    private void splicedCombo1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_splicedCombo1ActionPerformed
        splicedGUItoPhonSpec();
    }//GEN-LAST:event_splicedCombo1ActionPerformed

    private void ambigCombo4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ambigCombo4ActionPerformed
        //updates the phoneme specification in the table:        
        try{
            phonemeInputTable.setValueAt(ambigCombo4.getSelectedItem(),0,phonemeInputTable.getSelectedColumn());
        }
        catch(java.lang.ArrayIndexOutOfBoundsException aib){
            aib.printStackTrace();
            return;
        }
    }//GEN-LAST:event_ambigCombo4ActionPerformed

    private void ambigCombo3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ambigCombo3ActionPerformed
        updateAmbiguityGUI();
    }//GEN-LAST:event_ambigCombo3ActionPerformed

    private void ambigCombo2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ambigCombo2ActionPerformed
        updateAmbiguityGUI();
    }//GEN-LAST:event_ambigCombo2ActionPerformed

    private void ambigCombo1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ambigCombo1ActionPerformed
        updateAmbiguityGUI();
    }//GEN-LAST:event_ambigCombo1ActionPerformed

    private void continuumCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_continuumCheckboxActionPerformed
        if(continuumCheckbox.getModel().isSelected()){
            ambigCombo1.setEnabled(true);
            ambigCombo2.setEnabled(true);
            ambigCombo3.setEnabled(true);
            ambigCombo4.setEnabled(true);            
            updateAmbiguityGUI();
        }
        else{
            ambigCombo1.setEnabled(false);
            ambigCombo2.setEnabled(false);
            ambigCombo3.setEnabled(false);
            ambigCombo4.setEnabled(false);
        }
    }//GEN-LAST:event_continuumCheckboxActionPerformed

    private void normCombo1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_normCombo1ActionPerformed
        phonemeInputTable.setValueAt(normCombo1.getSelectedItem(),0,phonemeInputTable.getSelectedColumn());
    }//GEN-LAST:event_normCombo1ActionPerformed

    private void addVisualButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addVisualButtonActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_addVisualButtonActionPerformed

    private void splicedHelpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_splicedHelpButtonActionPerformed
        HelpFrame helpFrame = new HelpFrame(jTRACEMDI.properties);            
        helpFrame.setVisible(true);
        helpFrame.setEnabled(true);
        helpFrame.scrollToLink("#input panel");
    }//GEN-LAST:event_splicedHelpButtonActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addVisualButton;
    private javax.swing.JComboBox ambigCombo1;
    private javax.swing.JComboBox ambigCombo2;
    private javax.swing.JComboBox ambigCombo3;
    private javax.swing.JComboBox ambigCombo4;
    private javax.swing.JLabel ambigText1;
    private javax.swing.JLabel ambigText2;
    private javax.swing.JLabel ambigText3;
    private javax.swing.JLabel ambigText4;
    private javax.swing.JLabel ambigText5;
    private javax.swing.JPanel ambiguousPhonePanel;
    private javax.swing.JCheckBox continuumCheckbox;
    private javax.swing.JButton helpButton;
    private javax.swing.JLabel infoLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel mainVisualizerPanel;
    private javax.swing.JComboBox normCombo1;
    private javax.swing.JLabel normText1;
    private javax.swing.JPanel normalPhonePanel;
    private javax.swing.JTable parameterTable1;
    private javax.swing.JScrollPane phonemeInputScrollPane;
    private javax.swing.JTable phonemeInputTable;
    private javax.swing.JComboBox splicedCombo1;
    private javax.swing.JComboBox splicedCombo2;
    private javax.swing.JComboBox splicedCombo4;
    private javax.swing.JButton splicedHelpButton;
    private javax.swing.JPanel splicedPhonePanel;
    private javax.swing.JLabel splicedText1;
    private javax.swing.JLabel splicedText2;
    private javax.swing.JLabel splicedText3;
    private javax.swing.JLabel splicedText5;
    private javax.swing.JLabel splicedText6;
    private javax.swing.JTabbedPane tabbedPane1;
    private javax.swing.JTabbedPane tabbedPane2;
    private javax.swing.JLabel titleLabel1;
    private javax.swing.JLabel titleLabel2;
    private javax.swing.JLabel titleLabel3;
    private javax.swing.JLabel titleLabel4;
    private javax.swing.JLabel titleLabel5;
    // End of variables declaration//GEN-END:variables
    
}
