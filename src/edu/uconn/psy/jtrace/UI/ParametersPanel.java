/*
 * ParametersPanel.java
 *
 * Created on April 12, 2005, 7:03 PM
 */

package edu.uconn.psy.jtrace.UI;

import edu.uconn.psy.jtrace.IO.*;
import edu.uconn.psy.jtrace.Model.*;
import edu.uconn.psy.jtrace.Model.Dynamics.*;
import javax.swing.*;
import javax.swing.table.*;
import javax.swing.event.*;
import edu.uconn.psy.jtrace.Model.TraceParam.*;
import java.text.*;
import java.util.*;
import org.jdesktop.layout.GroupLayout;
import java.util.regex.*;

/**
 *
 * @author  harlan
 */
public class ParametersPanel extends JPanel implements TableModelListener {
    // for parameters
    private TraceParam parameters;
    private ParameterTableModel parametersDoubleData;
    private ParameterTableModel parametersIntData;
    private ParameterTableModel parametersStringData;
    
    // for lexicon
    private TraceLexicon lexicon;
    private DefaultTableModel lexiconTableModel;
    
    // for inputs
    //private String [] inputsStrings;
    //private DefaultTableModel inputsTableModel;
    
    // for combo boxes
    private String [] phonemeLabels; // will be set from TracePhones     
    private Character [] continuumSteps = { 
            new Character('3'), new Character('4'), new Character('5'), 
            new Character('6'), new Character('7'), new Character('8'), 
            new Character('9')};
            
    // for input list
    //private DefaultListModel inputListModel;
    
    private int sortingColumn = 0;
    private boolean sortingAscending = true;
    
    
    /** Creates new form ParametersPanel */
    public ParametersPanel(TraceParam p) {
        
        parameters = p;
        
        // setup phoneme labels 
        phonemeLabels = parameters.getPhonology().getLabels();        
        
        // set up GUI elements
        initComponents();
        
        initComponentsCustom();
        
        // setup lexicon manual management table
        lexiconTableModel = (DefaultTableModel)manualLexiconTable.getModel();
        
        // setup giant tripartite parameters table
        // get the models to play with
        parametersDoubleData = (ParameterTableModel)parametersTable.getModel();
        parametersIntData = (ParameterTableModel)parametersIntTable.getModel();
        parametersStringData = (ParameterTableModel)parametersStringTable.getModel();
        
        // setup inputs table
        //inputsTableModel = (DefaultTableModel)inputsTable.getModel();
        
        setParameters(parameters);
        
        initHints();
                
        //useDefaults();
    }
    
    public void initComponentsCustom()
    {
        //add column sorting to lexicon table.
        manualLexiconTable.getTableHeader().addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                manualLexiconTableHeaderMouseClicked(evt);
            }
        });
        //add validation to the first column of the lexicon editor table
        manualLexiconTable.getColumnModel().getColumn(0).setCellEditor(new ModelInputCellEditor(parameters));
        
        manualLexiconTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                //System.out.println("fire me "+manualLexiconTable.isEditing());
                if(!manualLexiconTable.isEditing()){
                    tableChanged(new TableModelEvent(manualLexiconTable.getModel(), manualLexiconTable.getSelectedRow(), manualLexiconTable.getSelectedRow(), manualLexiconTable.getSelectedColumn()));
                    loadLexiconToPanel();
                }
            }            
        });
        
        //the third column of the JTable has a combobox as editor
        TableColumn funcColumn = parametersTable.getColumnModel().getColumn(2);
        JComboBox comboBox = new JComboBox();
        comboBox.addItem("-");
        comboBox.addItem("Linear");
        //comboBox.addItem("Quadratic");        
        //comboBox.addItem("Logarithmic");        
        funcColumn.setCellEditor(new DefaultCellEditor(comboBox));
        functionDialog = new FunctionDialog();
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lexiconButtonGroup = new javax.swing.ButtonGroup();
        lexiconPanel = new javax.swing.JPanel();
        loadLexiconButton = new javax.swing.JButton();
        addLexemeButton = new javax.swing.JButton();
        delLexemeButton = new javax.swing.JButton();
        manualLexiconTableScrollPane = new javax.swing.JScrollPane();
        manualLexiconTable = new javax.swing.JTable();
        saveLexiconButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        modelInputPanel = new javax.swing.JPanel();
        enableContinuumCheckBox = new javax.swing.JCheckBox();
        continuumPanel = new javax.swing.JPanel();
        fromToPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        fromComboBox = new JComboBox(phonemeLabels);
        jLabel3 = new javax.swing.JLabel();
        toComboBox = new JComboBox(phonemeLabels);
        stepsPanel = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        stepsComboBox = new JComboBox(continuumSteps);
        useablePhonesLabel = new javax.swing.JLabel();
        useablePhoneLabel2 = new javax.swing.JLabel();
        inputTextField = new javax.swing.JTextField();
        inputLabel = new javax.swing.JLabel();
        parametersPanel = new javax.swing.JPanel();
        parametersScrollPane = new javax.swing.JScrollPane();
        mainParametersPanel = new javax.swing.JPanel();
        parametersTable = new javax.swing.JTable();
        parametersStringTable = new javax.swing.JTable();
        parametersIntTable = new javax.swing.JTable();
        buttonsPanel = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        resetButton = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();

        setLayout(new java.awt.GridBagLayout());

        lexiconPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Lexicon"));
        loadLexiconButton.setFont(new java.awt.Font("Lucida Grande", 0, 8));
        loadLexiconButton.setText("Load");
        loadLexiconButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadLexiconButtonActionPerformed(evt);
            }
        });

        addLexemeButton.setFont(new java.awt.Font("Lucida Grande", 0, 10));
        addLexemeButton.setText("+");
        addLexemeButton.setMargin(new java.awt.Insets(1, 3, 1, 3));
        addLexemeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addLexemeButtonActionPerformed(evt);
            }
        });

        delLexemeButton.setText("-");
        delLexemeButton.setMargin(new java.awt.Insets(1, 3, 1, 3));
        delLexemeButton.setMinimumSize(new java.awt.Dimension(22, 23));
        delLexemeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delLexemeButtonActionPerformed(evt);
            }
        });

        manualLexiconTableScrollPane.setPreferredSize(new java.awt.Dimension(453, 600));
        manualLexiconTableScrollPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                manualLexiconTableScrollPaneMouseClicked(evt);
            }
        });

        manualLexiconTable.setFont(new java.awt.Font("Lucida Grande", 0, 10));
        manualLexiconTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, new Double(0.0), new Double(0.0), "A", null, null}
            },
            new String [] {
                "Lexical Items", "Frequency", "Priming", "Label", "# Cohorts[1]", "# Cohorts[2]"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, true, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        manualLexiconTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        manualLexiconTable.setName("manualLexiconTable");
        manualLexiconTable.setShowVerticalLines(false);
        manualLexiconTable.getModel().addTableModelListener(this);
        manualLexiconTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                manualLexiconTableMouseClicked(evt);
            }
        });

        manualLexiconTableScrollPane.setViewportView(manualLexiconTable);

        saveLexiconButton.setFont(new java.awt.Font("Lucida Grande", 0, 8));
        saveLexiconButton.setText("Save");
        saveLexiconButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveLexiconButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 10));
        jLabel1.setText("Click column header to sort; sorting is case-sensitive.");

        org.jdesktop.layout.GroupLayout lexiconPanelLayout = new org.jdesktop.layout.GroupLayout(lexiconPanel);
        lexiconPanel.setLayout(lexiconPanelLayout);
        lexiconPanelLayout.setHorizontalGroup(
            lexiconPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(lexiconPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(lexiconPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(saveLexiconButton, 0, 0, Short.MAX_VALUE)
                    .add(loadLexiconButton, 0, 0, Short.MAX_VALUE)
                    .add(lexiconPanelLayout.createSequentialGroup()
                        .add(addLexemeButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(delLexemeButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(11, 11, 11)
                .add(lexiconPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(lexiconPanelLayout.createSequentialGroup()
                        .add(58, 58, 58)
                        .add(jLabel1))
                    .add(lexiconPanelLayout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(manualLexiconTableScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 322, Short.MAX_VALUE)))
                .addContainerGap())
        );
        lexiconPanelLayout.setVerticalGroup(
            lexiconPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(lexiconPanelLayout.createSequentialGroup()
                .add(lexiconPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, lexiconPanelLayout.createSequentialGroup()
                        .add(manualLexiconTableScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel1))
                    .add(lexiconPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(lexiconPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(addLexemeButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 26, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(delLexemeButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 26, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(1, 1, 1)
                        .add(loadLexiconButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(saveLexiconButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 19, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 0.7;
        add(lexiconPanel, gridBagConstraints);

        modelInputPanel.setLayout(new java.awt.GridBagLayout());

        modelInputPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Model Input"));
        enableContinuumCheckBox.setText("Enable continuum");
        enableContinuumCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enableContinuumCheckBoxActionPerformed(evt);
            }
        });
        enableContinuumCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                enableContinuumCheckBoxStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 5, 0, 0);
        modelInputPanel.add(enableContinuumCheckBox, gridBagConstraints);

        continuumPanel.setLayout(new java.awt.GridBagLayout());

        jLabel2.setText("from");
        fromToPanel.add(jLabel2);

        fromComboBox.setEnabled(false);
        fromComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fromComboBoxActionPerformed(evt);
            }
        });

        fromToPanel.add(fromComboBox);

        jLabel3.setText("to");
        fromToPanel.add(jLabel3);

        toComboBox.setEnabled(false);
        toComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toComboBoxActionPerformed(evt);
            }
        });

        fromToPanel.add(toComboBox);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        continuumPanel.add(fromToPanel, gridBagConstraints);

        jLabel4.setText("steps:");
        stepsPanel.add(jLabel4);

        stepsComboBox.setEnabled(false);
        stepsComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stepsComboBoxActionPerformed(evt);
            }
        });

        stepsPanel.add(stepsComboBox);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        continuumPanel.add(stepsPanel, gridBagConstraints);

        useablePhonesLabel.setText("Use 0 to (steps-1) in the");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        continuumPanel.add(useablePhonesLabel, gridBagConstraints);

        useablePhoneLabel2.setText("input for interpolated phoneme.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 1.0;
        continuumPanel.add(useablePhoneLabel2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 0);
        modelInputPanel.add(continuumPanel, gridBagConstraints);

        inputTextField.setText("-");
        inputTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputTextFieldActionPerformed(evt);
            }
        });
        inputTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                inputTextFieldFocusLost(evt);
            }
        });
        inputTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                inputTextFieldKeyReleased(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 3);
        modelInputPanel.add(inputTextField, gridBagConstraints);

        inputLabel.setText("Input string:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        modelInputPanel.add(inputLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.7;
        add(modelInputPanel, gridBagConstraints);

        parametersPanel.setLayout(new java.awt.GridBagLayout());

        parametersPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Parameters"));
        parametersScrollPane.setColumnHeaderView(parametersTable.getTableHeader());
        mainParametersPanel.setLayout(new java.awt.GridBagLayout());

        parametersTable.setModel(new ParameterTableModel(parametersTable));
        parametersTable.setName("parametersTable");
        parametersTable.setRowSelectionAllowed(false);
        parametersTable.setShowVerticalLines(false);
        parametersTable.getModel().addTableModelListener(this);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        mainParametersPanel.add(parametersTable, gridBagConstraints);

        parametersStringTable.setModel(new ParameterTableModel(parametersStringTable));
        parametersStringTable.setName("parametersStringTable");
        parametersStringTable.setRowSelectionAllowed(false);
        parametersStringTable.setShowVerticalLines(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        mainParametersPanel.add(parametersStringTable, gridBagConstraints);

        parametersIntTable.setModel(new ParameterTableModel(parametersIntTable));
        parametersIntTable.setName("parametersIntTable");
        parametersIntTable.setRowSelectionAllowed(false);
        parametersIntTable.setShowVerticalLines(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        mainParametersPanel.add(parametersIntTable, gridBagConstraints);

        parametersScrollPane.setViewportView(mainParametersPanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 2.0;
        parametersPanel.add(parametersScrollPane, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 2.0;
        add(parametersPanel, gridBagConstraints);

        buttonsPanel.setLayout(new java.awt.GridBagLayout());

        jSeparator1.setMinimumSize(new java.awt.Dimension(20, 0));
        jSeparator1.setPreferredSize(new java.awt.Dimension(20, 0));
        jSeparator1.setRequestFocusEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        buttonsPanel.add(jSeparator1, gridBagConstraints);

        resetButton.setText("Reset");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        buttonsPanel.add(resetButton, new java.awt.GridBagConstraints());

        jSeparator2.setMinimumSize(new java.awt.Dimension(20, 0));
        jSeparator2.setPreferredSize(new java.awt.Dimension(20, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        buttonsPanel.add(jSeparator2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(buttonsPanel, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents
    
    private void manualLexiconTableHeaderMouseClicked(java.awt.event.MouseEvent evt) {                                                
        JTableHeader header = manualLexiconTable.getTableHeader();
        TableColumnModel columns = header.getColumnModel();
        if(sortingColumn==header.columnAtPoint(evt.getPoint()))
            sortingAscending = ! sortingAscending;
        else
            sortingAscending = true;
        sortingColumn = header.columnAtPoint(evt.getPoint());
        if (sortingColumn == -1)   return;
        
        // Disable autoCreateColumnsFromModel otherwise all the column customizations
        // and adjustments will be lost when the model data is sorted
        manualLexiconTable.setAutoCreateColumnsFromModel(false);
        // Sort all the rows in descending order based on the
        // values in the second column of the model
        sortAllRowsBy((DefaultTableModel)manualLexiconTable.getModel(), sortingColumn, sortingAscending);
        //
        //manualLexiconTable.setAutoCreateColumnsFromModel(true);
    }
    
    private void manualLexiconTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_manualLexiconTableMouseClicked
        //System.out.println("table clicked");    
    }//GEN-LAST:event_manualLexiconTableMouseClicked

    private void manualLexiconTableScrollPaneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_manualLexiconTableScrollPaneMouseClicked
        //System.out.println("scrollpane clicked");        
    }//GEN-LAST:event_manualLexiconTableScrollPaneMouseClicked

    private void inputTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputTextFieldKeyReleased
        inputFromGUI();
    }//GEN-LAST:event_inputTextFieldKeyReleased

    private void saveLexiconButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveLexiconButtonActionPerformed
        // OK, get a filename from the user
        // pop up a file-save box 
        JFileChooser fileChooser = new JFileChooser(traceProperties.rootPath.getAbsolutePath());
        
        fileChooser.setDialogType(JFileChooser.SAVE_DIALOG);
        fileChooser.setDialogTitle("Save jTRACE parameters to file");
        fileChooser.setFileFilter(new edu.uconn.psy.jtrace.IO.XMLFileFilter());
        fileChooser.setCurrentDirectory(traceProperties.workingPath);                    
        
        int returnVal = fileChooser.showSaveDialog(this);
        
        if (returnVal == JFileChooser.APPROVE_OPTION) 
        {
            java.io.File saveFile = fileChooser.getSelectedFile();
            traceProperties.workingPath = saveFile.getParentFile();    
                
            edu.uconn.psy.jtrace.IO.WTFileWriter fw = new edu.uconn.psy.jtrace.IO.WTFileWriter(saveFile,false);
            
            fw.writeAndClose(lexicon.XMLTagNamespace());

        }
        // else, cancelled
    }//GEN-LAST:event_saveLexiconButtonActionPerformed

    private void inputTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_inputTextFieldFocusLost
        inputFromGUI();
    }//GEN-LAST:event_inputTextFieldFocusLost

    private void inputTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputTextFieldActionPerformed
        inputFromGUI();
    }//GEN-LAST:event_inputTextFieldActionPerformed

    /**
     * Check to see if the input text field contains a valid TRACE string. If so,
     * load it into the parameters object.
     */
    private void inputFromGUI()
    {
        if (parameters.getPhonology().validTraceWord(inputTextField.getText()))
        {
            inputTextField.setBackground(java.awt.Color.WHITE);
            
            parameters.setModelInput(inputTextField.getText());
        }
        else
        {
            inputTextField.setBackground(java.awt.Color.RED);
        }
    }
    
    private void stepsComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stepsComboBoxActionPerformed
        continuumFromGUI();
    }//GEN-LAST:event_stepsComboBoxActionPerformed

    private void toComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toComboBoxActionPerformed
        continuumFromGUI();
    }//GEN-LAST:event_toComboBoxActionPerformed

    private void fromComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fromComboBoxActionPerformed
        continuumFromGUI();
    }//GEN-LAST:event_fromComboBoxActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        parameters.resetToDefaults();
        setParameters(parameters);
    }//GEN-LAST:event_resetButtonActionPerformed

    private void enableContinuumCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enableContinuumCheckBoxActionPerformed
        fromComboBox.setEnabled(enableContinuumCheckBox.isEnabled());
        toComboBox.setEnabled(enableContinuumCheckBox.isEnabled());
        stepsComboBox.setEnabled(enableContinuumCheckBox.isEnabled());
        continuumFromGUI();
    }//GEN-LAST:event_enableContinuumCheckBoxActionPerformed

    private void delLexemeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delLexemeButtonActionPerformed
        int[] selectedRows = manualLexiconTable.getSelectedRows();
        if (selectedRows.length>0)
        {
            for(int i=(selectedRows.length-1);i>=0;i--){
                lexiconTableModel.removeRow(selectedRows[i]);                
            }
            parameters.incrUpdateCt();            
        }    
        loadLexiconToPanel();
    }//GEN-LAST:event_delLexemeButtonActionPerformed

    private void addLexemeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addLexemeButtonActionPerformed
        int selectedRow = manualLexiconTable.getSelectedRow();
        
        if (selectedRow == -1)
            selectedRow = lexiconTableModel.getRowCount();
        
        lexiconTableModel.insertRow(selectedRow, new Object[]{new String("-"), new Double(0), new Double(0), new String("-")});
        
        loadLexiconToPanel();
    }//GEN-LAST:event_addLexemeButtonActionPerformed

    private void loadLexiconButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadLexiconButtonActionPerformed
        java.io.File lexFile;
        javax.swing.JFileChooser lexFileChooser = new javax.swing.JFileChooser(traceProperties.rootPath.getAbsolutePath());
            
        lexFileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        lexFileChooser.addChoosableFileFilter(new XMLFileFilter());
        lexFileChooser.setCurrentDirectory(traceProperties.workingPath);            
        
        // show dialog
        int returnVal = lexFileChooser.showOpenDialog(this);
        
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            // we got a file...
            lexFile = lexFileChooser.getSelectedFile();
            traceProperties.workingPath = lexFile.getParentFile();    
        
            
            // try to read it
            WTFileReader fileReader = new WTFileReader(lexFile);
            
            if (!fileReader.validateLexiconFile()){             
                javax.swing.JOptionPane.showMessageDialog(null, "Invalid lexicon file.", "Error", javax.swing.JOptionPane.WARNING_MESSAGE);
                return;
            }
            
            // load it into our parameters
            lexicon = fileReader.loadJTLexicon();
            parameters.setLexicon(lexicon);
            // and onto the screen
            loadLexiconToPanel();
                   
            return;
        }
        else{ //if(returnVal == javax.swing.JFileChooser.CANCEL_OPTION){
            return;
        }
    }//GEN-LAST:event_loadLexiconButtonActionPerformed

    private void enableContinuumCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_enableContinuumCheckBoxStateChanged
        fromComboBox.setEnabled(enableContinuumCheckBox.isSelected());
        toComboBox.setEnabled(enableContinuumCheckBox.isSelected());
        stepsComboBox.setEnabled(enableContinuumCheckBox.isSelected());
        
        if (enableContinuumCheckBox.isSelected())
        {
            // construct a continuum string and provide it to the parameters obj
            continuumFromGUI();
        }
        else
        {
            parameters.setContinuumSpec("");
        }
    }//GEN-LAST:event_enableContinuumCheckBoxStateChanged

    /**
     * Load the continuum parameters from the gui and put into the parameters
     * object.
     */
    private void continuumFromGUI()
    {
        char cCont[] = new char[3];
        
        // get the from and to strings, and convert to characters
        cCont[0] = ((String)fromComboBox.getSelectedItem()).charAt(0);
        cCont[1] = ((String)toComboBox.getSelectedItem()).charAt(0);
        
        // get the steps
        cCont[2] = ((Character)stepsComboBox.getSelectedItem()).charValue();
        
        parameters.setContinuumSpec(new String(cCont));
        
    }
    
    public void loadParametersFile(java.io.File paramFile) {
        
        // try to read it
        WTFileReader fileReader = new WTFileReader(paramFile);
        
        // and load it in to the data structure
        //setParameters(fileReader.readWTParameterFile());  // use our bean to set
        
        // and that's it for here...
    }

    /**
     * Getter for property parameters.
     * @return Value of property parameters.
     */
    public TraceParam getParameters() {

        return this.parameters;
    }

    // don't forget to turn off the listener before calling this function!
    private void loadLexiconToPanel()
    {
        // disable the listener, or setRowCount will kill us! 
        lexiconTableModel.removeTableModelListener(this);   
            
        lexiconTableModel.setRowCount(0);   // reset
        TraceWord w;
        String coh1, coh2;
        for (int i = 0; i < lexicon.size(); i++)
        {
            // for each word in the lexicon
            w = lexicon.get(i);
            coh1 = lexicon.countCohorts(w,1)+" ("+w.getPhon().substring(0,1)+")";
            if(w.getPhon().length()>=2)
                coh2 = lexicon.countCohorts(w,2)+" ("+w.getPhon().substring(0,2)+")";
            else
                coh2 = "0 ("+w.getPhon()+")";
            lexiconTableModel.addRow(new Object[]{w.getPhon(), new Double(w.getFrequency()), new Double(w.getPrime()), w.getLabel(), coh1, coh2});
        }
        //manageManuallyRadioButton.setSelected(true);   
        
        // re-enable the listener
        lexiconTableModel.addTableModelListener(this);
        
    }
    
    public void openFunctionDialog(final int paramIdx){
        functionDialog = new FunctionDialog();                
        //TraceFunction newFunc; 
        functionDialog.getDoneButton().addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {                
                // get function spec from dialog
                TraceFunction newFunc = functionDialog.getFunctionSpecification(paramIdx);
                // add function to the TraceFunctionList, replacing if necessary. 
                if(parameters.getFunctionList().indexIsInList(paramIdx)){
                   parameters.getFunctionList().removeFunctionByIndex(paramIdx); 
                }
                parameters.getFunctionList().add(newFunc);
                //System.out.println("Trace Function "+newFunc.toString());
                // 
                functionDialog.setEnabled(false);
                functionDialog.setVisible(false);
                functionDialog.dispose();
                functionDialog=null;
            }
        });
        functionDialog.getCancelButton().addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                functionDialog.setEnabled(false);
                functionDialog.setVisible(false);
                functionDialog.dispose();
                functionDialog=null;
            }
        });
        // if there is already a function for this parameter, send the current values to the dialog
        //functionDialog.setSpinners(...);
        functionDialog.setParamName((String)parametersDoubleData.getValueAt(paramIdx,0));
        if(parameters.getFunctionList().indexIsInList(paramIdx)){
            LinearParameterFunction _fnc = (LinearParameterFunction)parameters.getFunctionList().getFunctionByIndex(paramIdx);            
            functionDialog.setSpinners(_fnc.getInit(),_fnc.getFrom(),_fnc.getTo(),_fnc.getStartCycle(),_fnc.getDurCycle());
        }        
        functionDialog.setVisible(true);         
    }
    
    /**
     * Setter for property parameters.
     * @param parameters New value of property parameters. 
     */
    public void setParameters(TraceParam _parameters) {

        if (parameters == null)
            parameters = _parameters;
        else if (parameters != _parameters)
            parameters = new TraceParam(_parameters);
            //this.parameters.copyFrom(parameters);
        // otherwise, we're the same thing, and just load into the GUI
        
        //propertyChangeSupport.firePropertyChange ("parameters", oldParameters, parameters);
        
        // here's where we load everything into the GUI
        
        // load in lexicon
        lexicon = parameters.getLexicon();
        loadLexiconToPanel();
        
        
        // load in model input
        inputTextField.setText(parameters.getModelInput());
//        // first, temporarily disable the listener!
//        inputsTableModel.removeTableModelListener(this);
//        // now, reset the table       
//        inputsTableModel.setRowCount(0);
//        // parameters.getModelInput() is comma-separated... parse and input (ick)
//        String inputs [] = (parameters.getModelInput()).split(",");
//        for (int i = 0; i < inputs.length; i++)
//            inputsTableModel.addRow(new Object[]{inputs[i]});
//        // and re-enable the listener
//        inputsTableModel.addTableModelListener(this);
        
        // setup the continuum combo boxes
        
        String[] phonComboModel = parameters.getPhonology().getLabels();
        fromComboBox.setModel(new javax.swing.DefaultComboBoxModel(phonComboModel));
        toComboBox.setModel(new javax.swing.DefaultComboBoxModel(phonComboModel));
        // load in continuum
        String continuum = parameters.getContinuumSpec();
        if (continuum.length() == 3)
        {
            char from = continuum.charAt(0);
            char to = continuum.charAt(1);
            char steps = continuum.charAt(2);  // 
            
            // set from
            for (int i = 0; i < fromComboBox.getItemCount(); i++)
            {
                if (((String)fromComboBox.getItemAt(i)).charAt(0) == from)
                {
                    fromComboBox.setSelectedIndex(i);
                    break;
                }
            }
            // set to
            for (int i = 0; i < toComboBox.getItemCount(); i++)
            {
                if (((String)toComboBox.getItemAt(i)).charAt(0) == to)
                {
                    toComboBox.setSelectedIndex(i);
                    break;
                }
            }
            // set steps
            for (int i = 0; i < stepsComboBox.getItemCount(); i++)
            {
                if (((Character)stepsComboBox.getItemAt(i)).charValue() == steps)
                {
                    stepsComboBox.setSelectedIndex(i);
                    break;
                }
            }
            
            fromComboBox.setEnabled(true);
            toComboBox.setEnabled(true);
            stepsComboBox.setEnabled(true);
            enableContinuumCheckBox.setSelected(true);
        }
        else
        {
            fromComboBox.setEnabled(false);
            toComboBox.setEnabled(false);
            stepsComboBox.setEnabled(false);
            enableContinuumCheckBox.setSelected(false);
        
        }
        
        // load the rest of the parameters
        // first, temporarily disable the listeners!
        parametersDoubleData.removeTableModelListener(this);
        parametersIntData.removeTableModelListener(this);
        parametersStringData.removeTableModelListener(this);
        // strings first
        int row = 0;
        parametersStringData.setValueAt(parameters.getComment(), row++,1);
        parametersStringData.setValueAt(parameters.getUser(), row++,1);
        parametersStringData.setValueAt(parameters.getDateTime(), row++,1);
        // then doubles
        row = 0;
        edu.uconn.psy.jtrace.Model.TraceParam.Alpha alpha = parameters.getAlpha();
        parametersDoubleData.setValueAt(new Double(alpha.IF), row++,1);
        parametersDoubleData.setValueAt(new Double(alpha.FP), row++, 1);
        parametersDoubleData.setValueAt(new Double(alpha.PW), row++, 1);
        parametersDoubleData.setValueAt(new Double(alpha.PF), row++, 1);
        parametersDoubleData.setValueAt(new Double(alpha.WP), row++, 1);
        edu.uconn.psy.jtrace.Model.TraceParam.Gamma gamma = parameters.getGamma();
        parametersDoubleData.setValueAt(new Double(gamma.F), row++,1);
        parametersDoubleData.setValueAt(new Double(gamma.P), row++, 1);
        parametersDoubleData.setValueAt(new Double(gamma.W), row++, 1);
        edu.uconn.psy.jtrace.Model.TraceParam.Decay decay = parameters.getDecay();
        parametersDoubleData.setValueAt(new Double(decay.F), row++,1);
        parametersDoubleData.setValueAt(new Double(decay.P), row++, 1);
        parametersDoubleData.setValueAt(new Double(decay.W), row++, 1);
        edu.uconn.psy.jtrace.Model.TraceParam.Rest rest = parameters.getRest();
        parametersDoubleData.setValueAt(new Double(rest.F), row++,1);
        parametersDoubleData.setValueAt(new Double(rest.P), row++, 1);
        parametersDoubleData.setValueAt(new Double(rest.W), row++, 1);
        parametersDoubleData.setValueAt(new Double(parameters.getNoiseSD()), row++, 1);
        parametersDoubleData.setValueAt(new Double(parameters.getStochasticitySD()), row++, 1);
        parametersDoubleData.setValueAt(new Double(parameters.getAtten()), row++,1);
        parametersDoubleData.setValueAt(new Double(parameters.getBias()), row++, 1);
        parametersDoubleData.setValueAt(new Double(parameters.getLearningRate()), row++, 1);        
        //edu.uconn.psy.jtrace.Model.TraceParam.Lambda lambda = parameters.getLambda();
        //parametersDoubleData.setValueAt(new Double(lambda.F), row++,1);
        //parametersDoubleData.setValueAt(new Double(lambda.P), row++, 1);
        //parametersDoubleData.setValueAt(new Double(lambda.W), row++, 1);
        parametersDoubleData.setValueAt(new Double(parameters.getSpreadScale()[0]), row++, 1);
        parametersDoubleData.setValueAt(new Double(parameters.getMin()), row++, 1);
        parametersDoubleData.setValueAt(new Double(parameters.getMax()), row++, 1);
        edu.uconn.psy.jtrace.Model.TraceParam.wordFrequency wordFreq = parameters.getFreqNode();
        parametersDoubleData.setValueAt(new Double(wordFreq.RDL_rest_s), row++, 1);
        parametersDoubleData.setValueAt(new Double(wordFreq.RDL_wt_s), row++, 1);
        parametersDoubleData.setValueAt(new Double(wordFreq.RDL_post_c), row++, 1);
        edu.uconn.psy.jtrace.Model.TraceParam.wordPriming wordPrime = parameters.getPrimeNode();
        parametersDoubleData.setValueAt(new Double(wordPrime.RDL_rest_s), row++, 1);
        parametersDoubleData.setValueAt(new Double(wordPrime.RDL_wt_s), row++, 1);
        parametersDoubleData.setValueAt(new Double(wordPrime.RDL_post_c), row++, 1);
        // and finally ints
        row = 0;
        int [] spreads = parameters.getSpread();
        for (int i = 0; i < spreads.length; i++)    // spreads.length = 7
            parametersIntData.setValueAt(new Integer(spreads[i]), row++,1);
        parametersIntData.setValueAt(new Integer(parameters.getFSlices()), row++, 1);
        parametersIntData.setValueAt(new Integer(parameters.getDeltaInput()), row++, 1);
        parametersIntData.setValueAt(new Integer(parameters.getNReps()), row++, 1);
        parametersIntData.setValueAt(new Integer(parameters.getSlicesPerPhon()), row++, 1);
        parametersIntData.setValueAt(new Integer(parameters.getLengthNormalization()), row++, 1);
        // re-enable the listener
        parametersDoubleData.addTableModelListener(this);
        parametersStringData.addTableModelListener(this);
        parametersIntData.addTableModelListener(this);
        
        //highlightChangedParameters();
        parameters.incrUpdateCt();
    }
    
    /** Regardless of sort order (ascending or descending), null values always appear last.
     *colIndex specifies a column in model.
     */
    public void sortAllRowsBy(DefaultTableModel model, int colIndex, boolean ascending) {
        java.util.Vector data = model.getDataVector();
        Collections.sort(data, new ColumnSorter(colIndex, ascending));
        model.fireTableStructureChanged();
    }
    
    /** This comparator is used to sort vectors of data
     */
    public class ColumnSorter implements Comparator {
        int colIndex;
        boolean ascending;
        ColumnSorter(int colIndex, boolean ascending) {
            this.colIndex = colIndex;
            this.ascending = ascending;
        }
        public int compare(Object a, Object b) {
            Vector v1 = (Vector)a;
            Vector v2 = (Vector)b;
            Object o1 = v1.get(colIndex);
            Object o2 = v2.get(colIndex);
    
            // Treat empty strains like nulls
            if (o1 instanceof String && ((String)o1).length() == 0) {
                o1 = null;
            }
            if (o2 instanceof String && ((String)o2).length() == 0) {
                o2 = null;
            }
    
            // Sort nulls so they appear last, regardless
            // of sort order
            if (o1 == null && o2 == null) {
                return 0;
            } else if (o1 == null) {
                return 1;
            } else if (o2 == null) {
                return -1;
            } else if (o1 instanceof Comparable) {
                if (ascending) {
                    return ((Comparable)o1).compareTo(o2);
                } else {
                    return ((Comparable)o2).compareTo(o1);
                }
            } else {
                if (ascending) {
                    return o1.toString().compareTo(o2.toString());
                } else {
                    return o2.toString().compareTo(o1.toString());
                }
            }
        }
    }
    
    public void highlightChangedParameters() {
        // this doesn't work, I think.
//        DefaultTableCellRenderer renderer;
//        
//        for (int i = 0; i < parametersTableModel.getRowCount(); i++)
//        {
//            Object param = parametersTableModel.getValueAt(i,1);
//            Object defParam = parametersTableModel.getValueAt(i,2);
//            
//            renderer = (DefaultTableCellRenderer)parametersTable.getCellRenderer(i,1);
//                
//            if (param.equals(defParam))
//            {
//                // set color to normal
//                renderer.setBackground(java.awt.Color.gray);
//            }
//            else
//            {
//                // set color to yellow
//                renderer.setBackground(java.awt.Color.yellow);
//            } 
//        }
    }

    public void useDefaults() {
        
        // create a new parameter object and tell us to use its values to set our
        // parameters object, and also update the GUI
        setParameters(new TraceParam());
        
    }

    public void tableChanged(TableModelEvent e) {
        // whenever a table changes, save it to the param object
        
        //System.out.println("table event: "+e.getColumn()+" "+e.getFirstRow()+" "+e.getLastRow()+" "+e.getType()+" "+e.getSource()+" "+e.getSource().getClass());
        TableModel model = (TableModel)e.getSource();                
        
        // if change occurs in lexical item column
        if (e.getColumn() == 0){
            int row = e.getFirstRow();
            int column = e.getColumn();
            String columnName = model.getColumnName(column);
            Object data = model.getValueAt(row, column);
        }
        // if change occurs in parameter function column
        else if (e.getColumn() == 2){
            //update the parameter function list in the parameter object
            String functionChoice=((String)parametersDoubleData.getValueAt(e.getFirstRow(),2));
            if(functionChoice==null) functionChoice="-";
            //System.out.println("table change: "+functionChoice+" "+e.getFirstRow()+" "+e.getColumn());
            // if function choice is to "-" (none) then remove node from fuction list.
            if(functionChoice!=null && functionChoice.equals("-") && parameters.getFunctionList() != null && parameters.getFunctionList().indexIsInList(e.getFirstRow())){
               parameters.getFunctionList().removeFunctionByIndex(e.getFirstRow()); 
            }
            else if(functionChoice!=null && functionChoice.equals("-")){
                //do nothing
            }
            // if function choice is not none, then open the appropriate function editor.
            //   then, upon closing of function editor, create a new node in the function list.
            //   see the function specs panel listener.
            else{
                openFunctionDialog(e.getFirstRow());                
            }            
        }
        
        // update table model from contents of table rows.
        if (parametersTable.getModel() == model)
        {
            // this is the Double parameters
            
            // iterate down the list, setting parameters as we go!
            int row = 0;
            
            
            Alpha alpha = parameters.getAlpha();
            Object oo = parametersDoubleData.getValueAt(row,1);
            Class cc = parametersDoubleData.getCellClass(row, 1);
            alpha.IF = ((Double)parametersDoubleData.getValueAt(row++,1)).doubleValue();
            alpha.FP = ((Double)parametersDoubleData.getValueAt(row++,1)).doubleValue();
            alpha.PW = ((Double)parametersDoubleData.getValueAt(row++,1)).doubleValue();
            alpha.PF = ((Double)parametersDoubleData.getValueAt(row++,1)).doubleValue();
            alpha.WP = ((Double)parametersDoubleData.getValueAt(row++,1)).doubleValue();
            parameters.setAlpha(alpha);
            
            Gamma gamma = parameters.getGamma();
            gamma.F = ((Double)parametersDoubleData.getValueAt(row++,1)).doubleValue();
            gamma.P = ((Double)parametersDoubleData.getValueAt(row++,1)).doubleValue();
            gamma.W = ((Double)parametersDoubleData.getValueAt(row++,1)).doubleValue();
            parameters.setGamma(gamma);
            
            Decay decay = parameters.getDecay();
            decay.F = ((Double)parametersDoubleData.getValueAt(row++,1)).doubleValue();
            decay.P = ((Double)parametersDoubleData.getValueAt(row++,1)).doubleValue();
            decay.W = ((Double)parametersDoubleData.getValueAt(row++,1)).doubleValue();
            parameters.setDecay(decay);
                        
            Rest rest = parameters.getRest();
            rest.F = ((Double)parametersDoubleData.getValueAt(row++,1)).doubleValue();
            rest.P = ((Double)parametersDoubleData.getValueAt(row++,1)).doubleValue();
            rest.W = ((Double)parametersDoubleData.getValueAt(row++,1)).doubleValue();
            parameters.setRest(rest);
            
            parameters.setNoiseSD(((Double)parametersDoubleData.getValueAt(row++,1)).doubleValue());
            parameters.setStochasticitySD(((Double)parametersDoubleData.getValueAt(row++,1)).doubleValue());
            
            parameters.setAtten(((Double)parametersDoubleData.getValueAt(row++,1)).doubleValue());
            parameters.setBias(((Double)parametersDoubleData.getValueAt(row++,1)).doubleValue());
            parameters.setLearningRate(((Double)parametersDoubleData.getValueAt(row++,1)).doubleValue());
                    
            //Lambda lambda = parameters.getLambda();
            //lambda.F = ((Double)parametersDoubleData.getValueAt(row++,1)).doubleValue();
            //lambda.P = ((Double)parametersDoubleData.getValueAt(row++,1)).doubleValue();
            //lambda.W = ((Double)parametersDoubleData.getValueAt(row++,1)).doubleValue();
            //parameters.setLambda(lambda);            
            
            parameters.setSpreadScale(((Double)parametersDoubleData.getValueAt(row++,1)).doubleValue());
            
            parameters.setMin(((Double)parametersDoubleData.getValueAt(row++,1)).doubleValue());
            parameters.setMax(((Double)parametersDoubleData.getValueAt(row++,1)).doubleValue());
                        
            wordFrequency wordFreq = parameters.getFreqNode();
            wordFreq.RDL_rest_s = ((Double)parametersDoubleData.getValueAt(row++,1)).doubleValue();
            wordFreq.RDL_wt_s = ((Double)parametersDoubleData.getValueAt(row++,1)).doubleValue();
            wordFreq.RDL_post_c = ((Double)parametersDoubleData.getValueAt(row++,1)).doubleValue();
            parameters.setFreqNode(wordFreq);
            
            wordPriming wordPrime = parameters.getPrimeNode();
            wordPrime.RDL_rest_s = ((Double)parametersDoubleData.getValueAt(row++,1)).doubleValue();
            wordPrime.RDL_wt_s = ((Double)parametersDoubleData.getValueAt(row++,1)).doubleValue();
            wordPrime.RDL_post_c = ((Double)parametersDoubleData.getValueAt(row++,1)).doubleValue();
            parameters.setPrimeNode(wordPrime);
        }
        else if (parametersStringTable.getModel() == model)
        {
            int row = 0;
            parameters.setComment((String)parametersStringData.getValueAt(row++,1));
            parameters.setUser((String)parametersStringData.getValueAt(row++,1));
            parameters.setDateTime((String)parametersStringData.getValueAt(row++,1));
        }
        else if (parametersIntTable.getModel() == model)
        {
            int row = 0;
            
            int [] spreads = parameters.getSpread();
            for (int i = 0; i < spreads.length; i++)    // spreads.length = 7
                spreads[i] = ((Integer)parametersIntData.getValueAt(row++,1)).intValue();
         
            parameters.setFSlices(((Integer)parametersIntData.getValueAt(row++,1)).intValue());
            parameters.setDeltaInput(((Integer)parametersIntData.getValueAt(row++,1)).intValue());
            parameters.setNReps(((Integer)parametersIntData.getValueAt(row++,1)).intValue());
            parameters.setSlicesPerPhon(((Integer)parametersIntData.getValueAt(row++,1)).intValue());
            parameters.setLengthNormalization(((Integer)parametersIntData.getValueAt(row++,1)).intValue());
        }
        else if (manualLexiconTable.getModel() == model)
        {
            // reset to a new dictionary
            lexicon = new TraceLexicon();
            
            // load everything from the table into the new dictionary
            for (int i = 0; i < manualLexiconTable.getRowCount(); i++)
            {
                
                String wordStr;
                if(manualLexiconTable.getValueAt(i,0)==null)
                    wordStr = "-";
                else
                    wordStr = (String)manualLexiconTable.getValueAt(i,0);
                
                double dFreq;
                if(manualLexiconTable.getValueAt(i,1)==null)
                    dFreq = 0d;
                else
                    dFreq = ((Double)manualLexiconTable.getValueAt(i,1)).doubleValue();                
                
                String dLabl;
                if(manualLexiconTable.getValueAt(i,3)==null)
                    dLabl = "";
                else
                    dLabl = (String)manualLexiconTable.getValueAt(i,3);                
                
                double dPrim; 
                if(manualLexiconTable.getValueAt(i,2)==null)
                    dPrim = 0d;
                else
                    dPrim = ((Double)manualLexiconTable.getValueAt(i,2)).doubleValue();
                lexicon.add(new TraceWord(wordStr, dFreq, dLabl, dPrim));
            }
            
            // update param
            parameters.setLexicon(lexicon);
            
        }
        else
        {
            // something's broke
            System.out.println("parametersPanel.tableChanged error!");
        }
        
    }
    public void lock(){
        parametersDoubleData.lock();
        parametersIntData.lock();
        parametersStringData.lock();
        manualLexiconTable.setEnabled(false);
        enableContinuumCheckBox.setEnabled(false);
        inputTextField.setEnabled(false);
        addLexemeButton.setEnabled(false);
        delLexemeButton.setEnabled(false);
        loadLexiconButton.setEnabled(false);
        saveLexiconButton.setEnabled(false);
        addLexemeButton.removeAll();        
        delLexemeButton.removeAll();
        loadLexiconButton.removeAll();
        saveLexiconButton.removeAll();
        
    }
    
    public void initHints() 
    {
        MouseOverHintManager hintManager = jTRACEMDI.hintManager;
        
        // lexicon objects
        hintManager.addHintFor(manualLexiconTableScrollPane, "Model lexicon");
        hintManager.addHintFor(addLexemeButton, "Add new lexical item");
        hintManager.addHintFor(delLexemeButton, "Delete selected lexical item");
        hintManager.addHintFor(loadLexiconButton, "Load lexicon from file");
        hintManager.addHintFor(saveLexiconButton, "Save lexicon to file");
        // model input objects
        hintManager.addHintFor(inputLabel, "Input to model");
        hintManager.addHintFor(inputTextField, "Input to model");
        hintManager.addHintFor(enableContinuumCheckBox, "Allow numerals to represent intermediate phones");
        hintManager.addHintFor(fromComboBox, "Endpoint of continuum");
        hintManager.addHintFor(toComboBox, "Endpoint of continuum");
        hintManager.addHintFor(stepsComboBox, "Number of steps in continuum");
        // parameters objects
        hintManager.addHintFor(mainParametersPanel, "Model parameters");
        // buttons
        hintManager.addHintFor(resetButton, "Reset all parameters to defaults");
        
        hintManager.enableHints(this);   
    }
    
    private FunctionDialog functionDialog;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addLexemeButton;
    private javax.swing.JPanel buttonsPanel;
    private javax.swing.JPanel continuumPanel;
    private javax.swing.JButton delLexemeButton;
    private javax.swing.JCheckBox enableContinuumCheckBox;
    private javax.swing.JComboBox fromComboBox;
    private javax.swing.JPanel fromToPanel;
    private javax.swing.JLabel inputLabel;
    private javax.swing.JTextField inputTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.ButtonGroup lexiconButtonGroup;
    private javax.swing.JPanel lexiconPanel;
    private javax.swing.JButton loadLexiconButton;
    private javax.swing.JPanel mainParametersPanel;
    private javax.swing.JTable manualLexiconTable;
    private javax.swing.JScrollPane manualLexiconTableScrollPane;
    private javax.swing.JPanel modelInputPanel;
    private javax.swing.JTable parametersIntTable;
    private javax.swing.JPanel parametersPanel;
    private javax.swing.JScrollPane parametersScrollPane;
    private javax.swing.JTable parametersStringTable;
    private javax.swing.JTable parametersTable;
    private javax.swing.JButton resetButton;
    private javax.swing.JButton saveLexiconButton;
    private javax.swing.JComboBox stepsComboBox;
    private javax.swing.JPanel stepsPanel;
    private javax.swing.JComboBox toComboBox;
    private javax.swing.JLabel useablePhoneLabel2;
    private javax.swing.JLabel useablePhonesLabel;
    // End of variables declaration//GEN-END:variables
    
}
